`include "timescale.v"
//
// Generated by Bluespec Compiler (build 14ff62d)
//
// On Mon Feb  6 14:29:12 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// AXI4_AWREADY                   O     1 reg
// AXI4_WREADY                    O     1 reg
// AXI4_BVALID                    O     1 reg
// AXI4_BID                       O     8 reg
// AXI4_BRESP                     O     2 reg
// AXI4_ARREADY                   O     1 reg
// AXI4_RVALID                    O     1 reg
// AXI4_RID                       O     8 reg
// AXI4_RDATA                     O    64 reg
// AXI4_RRESP                     O     2 reg
// AXI4_RLAST                     O     1 reg
// APB_PADDR                      O    32 reg
// APB_PROT                       O     3 reg
// APB_PENABLE                    O     1 reg
// APB_PWRITE                     O     1 reg
// APB_PWDATA                     O     8 reg
// APB_PSTRB                      O     1 reg
// APB_PSEL                       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// AXI4_AWVALID                   I     1
// AXI4_AWID                      I     8 reg
// AXI4_AWADDR                    I    32 reg
// AXI4_AWLEN                     I     8 reg
// AXI4_AWSIZE                    I     3 reg
// AXI4_AWBURST                   I     2 reg
// AXI4_AWLOCK                    I     1 reg
// AXI4_AWCACHE                   I     4 reg
// AXI4_AWPROT                    I     3 reg
// AXI4_AWQOS                     I     4 reg
// AXI4_AWREGION                  I     4 reg
// AXI4_WVALID                    I     1
// AXI4_WDATA                     I    64 reg
// AXI4_WSTRB                     I     8 reg
// AXI4_WLAST                     I     1 reg
// AXI4_BREADY                    I     1
// AXI4_ARVALID                   I     1
// AXI4_ARID                      I     8 reg
// AXI4_ARADDR                    I    32 reg
// AXI4_ARLEN                     I     8 reg
// AXI4_ARSIZE                    I     3 reg
// AXI4_ARBURST                   I     2 reg
// AXI4_ARLOCK                    I     1 reg
// AXI4_ARCACHE                   I     4 reg
// AXI4_ARPROT                    I     3 reg
// AXI4_ARQOS                     I     4 reg
// AXI4_ARREGION                  I     4 reg
// AXI4_RREADY                    I     1
// APB_PREADY                     I     1
// APB_PRDATA                     I     8 reg
// APB_PSLVERR                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkaxi64apb8_bridge(CLK,
			RST_N,

			AXI4_AWVALID,
			AXI4_AWID,
			AXI4_AWADDR,
			AXI4_AWLEN,
			AXI4_AWSIZE,
			AXI4_AWBURST,
			AXI4_AWLOCK,
			AXI4_AWCACHE,
			AXI4_AWPROT,
			AXI4_AWQOS,
			AXI4_AWREGION,

			AXI4_AWREADY,

			AXI4_WVALID,
			AXI4_WDATA,
			AXI4_WSTRB,
			AXI4_WLAST,

			AXI4_WREADY,

			AXI4_BVALID,

			AXI4_BID,

			AXI4_BRESP,

			AXI4_BREADY,

			AXI4_ARVALID,
			AXI4_ARID,
			AXI4_ARADDR,
			AXI4_ARLEN,
			AXI4_ARSIZE,
			AXI4_ARBURST,
			AXI4_ARLOCK,
			AXI4_ARCACHE,
			AXI4_ARPROT,
			AXI4_ARQOS,
			AXI4_ARREGION,

			AXI4_ARREADY,

			AXI4_RVALID,

			AXI4_RID,

			AXI4_RDATA,

			AXI4_RRESP,

			AXI4_RLAST,

			AXI4_RREADY,

			APB_PADDR,

			APB_PROT,

			APB_PENABLE,

			APB_PWRITE,

			APB_PWDATA,

			APB_PSTRB,

			APB_PSEL,

			APB_PREADY,
			APB_PRDATA,
			APB_PSLVERR);
  input  CLK;
  input  RST_N;

  // action method axi4_side_m_awvalid
  input  AXI4_AWVALID;
  input  [7 : 0] AXI4_AWID;
  input  [31 : 0] AXI4_AWADDR;
  input  [7 : 0] AXI4_AWLEN;
  input  [2 : 0] AXI4_AWSIZE;
  input  [1 : 0] AXI4_AWBURST;
  input  AXI4_AWLOCK;
  input  [3 : 0] AXI4_AWCACHE;
  input  [2 : 0] AXI4_AWPROT;
  input  [3 : 0] AXI4_AWQOS;
  input  [3 : 0] AXI4_AWREGION;

  // value method axi4_side_m_awready
  output AXI4_AWREADY;

  // action method axi4_side_m_wvalid
  input  AXI4_WVALID;
  input  [63 : 0] AXI4_WDATA;
  input  [7 : 0] AXI4_WSTRB;
  input  AXI4_WLAST;

  // value method axi4_side_m_wready
  output AXI4_WREADY;

  // value method axi4_side_m_bvalid
  output AXI4_BVALID;

  // value method axi4_side_m_bid
  output [7 : 0] AXI4_BID;

  // value method axi4_side_m_bresp
  output [1 : 0] AXI4_BRESP;

  // value method axi4_side_m_buser

  // action method axi4_side_m_bready
  input  AXI4_BREADY;

  // action method axi4_side_m_arvalid
  input  AXI4_ARVALID;
  input  [7 : 0] AXI4_ARID;
  input  [31 : 0] AXI4_ARADDR;
  input  [7 : 0] AXI4_ARLEN;
  input  [2 : 0] AXI4_ARSIZE;
  input  [1 : 0] AXI4_ARBURST;
  input  AXI4_ARLOCK;
  input  [3 : 0] AXI4_ARCACHE;
  input  [2 : 0] AXI4_ARPROT;
  input  [3 : 0] AXI4_ARQOS;
  input  [3 : 0] AXI4_ARREGION;

  // value method axi4_side_m_arready
  output AXI4_ARREADY;

  // value method axi4_side_m_rvalid
  output AXI4_RVALID;

  // value method axi4_side_m_rid
  output [7 : 0] AXI4_RID;

  // value method axi4_side_m_rdata
  output [63 : 0] AXI4_RDATA;

  // value method axi4_side_m_rresp
  output [1 : 0] AXI4_RRESP;

  // value method axi4_side_m_rlast
  output AXI4_RLAST;

  // value method axi4_side_m_ruser

  // action method axi4_side_m_rready
  input  AXI4_RREADY;

  // value method apb_side_m_paddr
  output [31 : 0] APB_PADDR;

  // value method apb_side_m_prot
  output [2 : 0] APB_PROT;

  // value method apb_side_m_penable
  output APB_PENABLE;

  // value method apb_side_m_pwrite
  output APB_PWRITE;

  // value method apb_side_m_pwdata
  output [7 : 0] APB_PWDATA;

  // value method apb_side_m_pstrb
  output APB_PSTRB;

  // value method apb_side_m_psel
  output APB_PSEL;

  // value method apb_side_m_puser

  // action method apb_side_m_pready
  input  APB_PREADY;
  input  [7 : 0] APB_PRDATA;
  input  APB_PSLVERR;

  // signals for module outputs
  wire [63 : 0] AXI4_RDATA;
  wire [31 : 0] APB_PADDR;
  wire [7 : 0] APB_PWDATA, AXI4_BID, AXI4_RID;
  wire [2 : 0] APB_PROT;
  wire [1 : 0] AXI4_BRESP, AXI4_RRESP;
  wire APB_PENABLE,
       APB_PSEL,
       APB_PSTRB,
       APB_PWRITE,
       AXI4_ARREADY,
       AXI4_AWREADY,
       AXI4_BVALID,
       AXI4_RLAST,
       AXI4_RVALID,
       AXI4_WREADY;

  // inlined wires
  reg [45 : 0] apb_xactor_ff_request_rv_port0__write_1;
  wire [45 : 0] apb_xactor_ff_request_rv_port1__read,
		apb_xactor_ff_request_rv_port1__write_1,
		apb_xactor_ff_request_rv_port2__read;
  wire apb_xactor_ff_request_rv_EN_port0__write;

  // register apb_xactor_ff_request_rv
  reg [45 : 0] apb_xactor_ff_request_rv;
  wire [45 : 0] apb_xactor_ff_request_rv_D_IN;
  wire apb_xactor_ff_request_rv_EN;

  // register apb_xactor_rg_enable
  reg apb_xactor_rg_enable;
  wire apb_xactor_rg_enable_D_IN, apb_xactor_rg_enable_EN;

  // register apb_xactor_rg_request
  reg [44 : 0] apb_xactor_rg_request;
  wire [44 : 0] apb_xactor_rg_request_D_IN;
  wire apb_xactor_rg_request_EN;

  // register apb_xactor_rg_sel
  reg apb_xactor_rg_sel;
  wire apb_xactor_rg_sel_D_IN, apb_xactor_rg_sel_EN;

  // register apb_xactor_rg_state
  reg [1 : 0] apb_xactor_rg_state;
  reg [1 : 0] apb_xactor_rg_state_D_IN;
  wire apb_xactor_rg_state_EN;

  // register rg_accum_data
  reg [63 : 0] rg_accum_data;
  wire [63 : 0] rg_accum_data_D_IN;
  wire rg_accum_data_EN;

  // register rg_accum_err
  reg rg_accum_err;
  wire rg_accum_err_D_IN, rg_accum_err_EN;

  // register rg_accum_mask
  reg [7 : 0] rg_accum_mask;
  reg [7 : 0] rg_accum_mask_D_IN;
  wire rg_accum_mask_EN;

  // register rg_child_burst
  reg [7 : 0] rg_child_burst;
  wire [7 : 0] rg_child_burst_D_IN;
  wire rg_child_burst_EN;

  // register rg_child_req_count
  reg [7 : 0] rg_child_req_count;
  reg [7 : 0] rg_child_req_count_D_IN;
  wire rg_child_req_count_EN;

  // register rg_child_res_count
  reg [7 : 0] rg_child_res_count;
  reg [7 : 0] rg_child_res_count_D_IN;
  wire rg_child_res_count_EN;

  // register rg_rd_request
  reg [68 : 0] rg_rd_request;
  wire [68 : 0] rg_rd_request_D_IN;
  wire rg_rd_request_EN;

  // register rg_req_beat
  reg [7 : 0] rg_req_beat;
  reg [7 : 0] rg_req_beat_D_IN;
  wire rg_req_beat_EN;

  // register rg_resp_beat
  reg [7 : 0] rg_resp_beat;
  reg [7 : 0] rg_resp_beat_D_IN;
  wire rg_resp_beat_EN;

  // register rg_state
  reg [1 : 0] rg_state;
  reg [1 : 0] rg_state_D_IN;
  wire rg_state_EN;

  // register rg_wd_request
  reg [72 : 0] rg_wd_request;
  wire [72 : 0] rg_wd_request_D_IN;
  wire rg_wd_request_EN;

  // register rg_wr_request
  reg [68 : 0] rg_wr_request;
  wire [68 : 0] rg_wr_request_D_IN;
  wire rg_wr_request_EN;

  // ports of submodule apb_xactor_ff_response
  wire [8 : 0] apb_xactor_ff_response_D_IN, apb_xactor_ff_response_D_OUT;
  wire apb_xactor_ff_response_CLR,
       apb_xactor_ff_response_DEQ,
       apb_xactor_ff_response_EMPTY_N,
       apb_xactor_ff_response_ENQ,
       apb_xactor_ff_response_FULL_N;

  // ports of submodule axi_xactor_f_arfifo
  wire [68 : 0] axi_xactor_f_arfifo_D_IN, axi_xactor_f_arfifo_D_OUT;
  wire axi_xactor_f_arfifo_CLR,
       axi_xactor_f_arfifo_DEQ,
       axi_xactor_f_arfifo_EMPTY_N,
       axi_xactor_f_arfifo_ENQ,
       axi_xactor_f_arfifo_FULL_N;

  // ports of submodule axi_xactor_f_awfifo
  wire [68 : 0] axi_xactor_f_awfifo_D_IN, axi_xactor_f_awfifo_D_OUT;
  wire axi_xactor_f_awfifo_CLR,
       axi_xactor_f_awfifo_DEQ,
       axi_xactor_f_awfifo_EMPTY_N,
       axi_xactor_f_awfifo_ENQ,
       axi_xactor_f_awfifo_FULL_N;

  // ports of submodule axi_xactor_f_bfifo
  wire [9 : 0] axi_xactor_f_bfifo_D_IN, axi_xactor_f_bfifo_D_OUT;
  wire axi_xactor_f_bfifo_CLR,
       axi_xactor_f_bfifo_DEQ,
       axi_xactor_f_bfifo_EMPTY_N,
       axi_xactor_f_bfifo_ENQ,
       axi_xactor_f_bfifo_FULL_N;

  // ports of submodule axi_xactor_f_rfifo
  wire [74 : 0] axi_xactor_f_rfifo_D_IN, axi_xactor_f_rfifo_D_OUT;
  wire axi_xactor_f_rfifo_CLR,
       axi_xactor_f_rfifo_DEQ,
       axi_xactor_f_rfifo_EMPTY_N,
       axi_xactor_f_rfifo_ENQ,
       axi_xactor_f_rfifo_FULL_N;

  // ports of submodule axi_xactor_f_wfifo
  wire [72 : 0] axi_xactor_f_wfifo_D_IN, axi_xactor_f_wfifo_D_OUT;
  wire axi_xactor_f_wfifo_CLR,
       axi_xactor_f_wfifo_DEQ,
       axi_xactor_f_wfifo_EMPTY_N,
       axi_xactor_f_wfifo_ENQ,
       axi_xactor_f_wfifo_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_apb_xactor_rl_access_to_idle,
       CAN_FIRE_RL_apb_xactor_rl_access_to_setup,
       CAN_FIRE_RL_apb_xactor_rl_idle_to_setup,
       CAN_FIRE_RL_apb_xactor_rl_setup_state,
       CAN_FIRE_RL_rl_read_frm_axi,
       CAN_FIRE_RL_rl_read_response_to_axi,
       CAN_FIRE_RL_rl_send_rd_burst_req,
       CAN_FIRE_RL_rl_send_wr_burst_req,
       CAN_FIRE_RL_rl_write_frm_axi,
       CAN_FIRE_RL_rl_write_response_to_axi,
       CAN_FIRE_apb_side_m_pready,
       CAN_FIRE_axi4_side_m_arvalid,
       CAN_FIRE_axi4_side_m_awvalid,
       CAN_FIRE_axi4_side_m_bready,
       CAN_FIRE_axi4_side_m_rready,
       CAN_FIRE_axi4_side_m_wvalid,
       WILL_FIRE_RL_apb_xactor_rl_access_to_idle,
       WILL_FIRE_RL_apb_xactor_rl_access_to_setup,
       WILL_FIRE_RL_apb_xactor_rl_idle_to_setup,
       WILL_FIRE_RL_apb_xactor_rl_setup_state,
       WILL_FIRE_RL_rl_read_frm_axi,
       WILL_FIRE_RL_rl_read_response_to_axi,
       WILL_FIRE_RL_rl_send_rd_burst_req,
       WILL_FIRE_RL_rl_send_wr_burst_req,
       WILL_FIRE_RL_rl_write_frm_axi,
       WILL_FIRE_RL_rl_write_response_to_axi,
       WILL_FIRE_apb_side_m_pready,
       WILL_FIRE_axi4_side_m_arvalid,
       WILL_FIRE_axi4_side_m_awvalid,
       WILL_FIRE_axi4_side_m_bready,
       WILL_FIRE_axi4_side_m_rready,
       WILL_FIRE_axi4_side_m_wvalid;

  // inputs to muxes for submodule ports
  wire [68 : 0] MUX_rg_rd_request_write_1__VAL_1,
		MUX_rg_wr_request_write_1__VAL_1;
  wire [45 : 0] MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_1,
		MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_2,
		MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_3,
		MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_4;
  wire [7 : 0] MUX_rg_accum_mask_write_1__VAL_1,
	       MUX_rg_accum_mask_write_1__VAL_2,
	       MUX_rg_accum_mask_write_1__VAL_3,
	       MUX_rg_child_burst_write_1__VAL_1,
	       MUX_rg_child_burst_write_1__VAL_2,
	       MUX_rg_child_req_count_write_1__VAL_1,
	       MUX_rg_child_req_count_write_1__VAL_2,
	       MUX_rg_child_req_count_write_1__VAL_3,
	       MUX_rg_child_res_count_write_1__VAL_1,
	       MUX_rg_req_beat_write_1__VAL_1,
	       MUX_rg_req_beat_write_1__VAL_2,
	       MUX_rg_req_beat_write_1__VAL_3,
	       MUX_rg_resp_beat_write_1__VAL_1;
  wire MUX_apb_xactor_rg_enable_write_1__SEL_1,
       MUX_apb_xactor_rg_sel_write_1__SEL_2,
       MUX_rg_accum_err_write_1__VAL_1,
       MUX_rg_child_req_count_write_1__PSEL_1,
       MUX_rg_child_req_count_write_1__SEL_1,
       MUX_rg_child_res_count_write_1__PSEL_1,
       MUX_rg_child_res_count_write_1__SEL_1,
       MUX_rg_rd_request_write_1__SEL_1,
       MUX_rg_req_beat_write_1__SEL_1,
       MUX_rg_resp_beat_write_1__SEL_1,
       MUX_rg_state_write_1__SEL_1,
       MUX_rg_wr_request_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d98;
  reg TASK_testplusargs___d99;
  reg TASK_testplusargs___d100;
  reg [63 : 0] v__h3859;
  reg TASK_testplusargs___d147;
  reg TASK_testplusargs___d148;
  reg TASK_testplusargs___d149;
  reg [63 : 0] v__h4073;
  reg TASK_testplusargs___d309;
  reg TASK_testplusargs___d310;
  reg TASK_testplusargs___d311;
  reg [63 : 0] v__h10460;
  reg TASK_testplusargs___d323;
  reg TASK_testplusargs___d324;
  reg TASK_testplusargs___d325;
  reg [63 : 0] v__h10733;
  reg TASK_testplusargs___d341;
  reg TASK_testplusargs___d342;
  reg TASK_testplusargs___d343;
  reg [63 : 0] v__h11111;
  reg TASK_testplusargs___d349;
  reg TASK_testplusargs___d350;
  reg TASK_testplusargs___d351;
  reg [63 : 0] v__h11268;
  reg TASK_testplusargs___d211;
  reg TASK_testplusargs___d212;
  reg TASK_testplusargs___d213;
  reg [63 : 0] v__h5083;
  reg TASK_testplusargs___d217;
  reg TASK_testplusargs___d218;
  reg TASK_testplusargs___d219;
  reg [63 : 0] v__h5241;
  reg TASK_testplusargs___d223;
  reg TASK_testplusargs___d224;
  reg TASK_testplusargs___d225;
  reg [63 : 0] v__h5401;
  reg TASK_testplusargs___d388;
  reg TASK_testplusargs___d389;
  reg TASK_testplusargs___d390;
  reg [63 : 0] v__h12194;
  reg TASK_testplusargs___d435;
  reg TASK_testplusargs___d436;
  reg TASK_testplusargs___d437;
  reg [63 : 0] v__h12408;
  reg TASK_testplusargs___d445;
  reg TASK_testplusargs___d446;
  reg TASK_testplusargs___d447;
  reg [63 : 0] v__h12568;
  reg TASK_testplusargs___d531;
  reg TASK_testplusargs___d532;
  reg TASK_testplusargs___d533;
  reg [63 : 0] v__h14039;
  reg TASK_testplusargs___d540;
  reg TASK_testplusargs___d541;
  reg TASK_testplusargs___d542;
  reg [63 : 0] v__h14485;
  reg TASK_testplusargs___d481;
  reg TASK_testplusargs___d482;
  reg TASK_testplusargs___d483;
  reg [63 : 0] v__h13155;
  reg TASK_testplusargs___d505;
  reg TASK_testplusargs___d506;
  reg TASK_testplusargs___d507;
  reg [63 : 0] v__h13487;
  reg TASK_testplusargs___d513;
  reg TASK_testplusargs___d514;
  reg TASK_testplusargs___d515;
  reg [63 : 0] v__h13656;
  reg TASK_testplusargs___d519;
  reg TASK_testplusargs___d520;
  reg TASK_testplusargs___d521;
  reg [63 : 0] v__h13820;
  reg TASK_testplusargs___d8;
  reg TASK_testplusargs___d9;
  reg TASK_testplusargs___d10;
  reg [63 : 0] v__h1074;
  reg TASK_testplusargs___d14;
  reg TASK_testplusargs___d15;
  reg TASK_testplusargs___d16;
  reg [63 : 0] v__h1225;
  reg TASK_testplusargs___d29;
  reg TASK_testplusargs___d30;
  reg TASK_testplusargs___d31;
  reg [63 : 0] v__h1397;
  reg TASK_testplusargs___d45;
  reg TASK_testplusargs___d46;
  reg TASK_testplusargs___d47;
  reg [63 : 0] v__h1626;
  reg TASK_testplusargs___d51;
  reg TASK_testplusargs___d52;
  reg TASK_testplusargs___d53;
  reg [63 : 0] v__h1775;
  reg TASK_testplusargs___d62;
  reg TASK_testplusargs___d63;
  reg TASK_testplusargs___d64;
  reg [63 : 0] v__h2050;
  reg TASK_testplusargs___d68;
  reg TASK_testplusargs___d69;
  reg TASK_testplusargs___d70;
  reg [63 : 0] v__h2208;
  reg TASK_testplusargs___d76;
  reg TASK_testplusargs___d77;
  reg TASK_testplusargs___d78;
  reg [63 : 0] v__h2363;
  reg TASK_testplusargs_23_OR_TASK_testplusargs_24_A_ETC___d330;
  reg TASK_testplusargs_23_OR_TASK_testplusargs_24_A_ETC___d333;
  reg TASK_testplusargs_23_OR_TASK_testplusargs_24_A_ETC___d335;
  reg TASK_testplusargs_23_OR_TASK_testplusargs_24_A_ETC___d338;
  reg TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d488;
  reg TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d490;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d23;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d25;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d57;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d59;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d74;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d75;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d82;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d83;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d107;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d109;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d111;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d113;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d115;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d117;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d119;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d133;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d136;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d138;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d140;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d146;
  reg NOT_rg_child_res_count_03_EQ_rg_child_burst_66_ETC___d314;
  reg rg_child_res_count_03_EQ_rg_child_burst_66_04__ETC___d328;
  reg TASK_testplusargs_41_OR_TASK_testplusargs_42_A_ETC___d347;
  reg TASK_testplusargs_41_OR_TASK_testplusargs_42_A_ETC___d348;
  reg TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d395;
  reg TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d397;
  reg TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d399;
  reg TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d401;
  reg TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d403;
  reg TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d405;
  reg TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d407;
  reg TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d421;
  reg TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d424;
  reg TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d426;
  reg TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d428;
  reg TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d434;
  reg TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d442;
  reg TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d444;
  reg rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d486;
  reg rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d489;
  reg rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d491;
  reg TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d511;
  reg TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d512;
  reg NOT_rg_child_res_count_03_EQ_rg_child_burst_66_ETC___d536;
  reg TASK_testplusargs_40_OR_TASK_testplusargs_41_A_ETC___d546;
  reg TASK_testplusargs_40_OR_TASK_testplusargs_41_A_ETC___d547;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] new_address__h12637, new_address__h4502;
  reg [2 : 0] CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1,
	      CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2;
  wire [63 : 0] v__h5506, x__h11454, x__h13359, y_avValue_snd_fst__h13360;
  wire [47 : 0] apb_xactor_ff_response_first__37_BITS_8_TO_1_3_ETC___d285;
  wire [31 : 0] apb_request_paddr__h13349,
		apb_xactor_ff_response_first__37_BITS_8_TO_1_3_ETC___d270,
		mask__h12763,
		mask__h4633,
		new_address__h12761,
		new_address__h4631,
		temp1__h12764,
		temp1__h4634,
		temp2__h12765,
		temp2__h4635,
		v__h4507,
		v__h4527,
		y__h12865,
		y__h4733,
		y_avValue_fst__h12976;
  wire [10 : 0] shift__h12689;
  wire [7 : 0] request_size__h11389,
	       request_size__h4177,
	       x__h11536,
	       x__h11759,
	       x__h12673,
	       x__h13386,
	       x__h14140,
	       x__h4233,
	       x__h6277,
	       x__h7800,
	       x__h7938,
	       x__h8076,
	       x__h8214,
	       x__h8352,
	       x__h8490,
	       x__h8628,
	       y__h13016,
	       y__h6278,
	       y__h6279,
	       y__h7723,
	       y__h7801,
	       y__h7802,
	       y__h7862,
	       y__h7939,
	       y__h7940,
	       y__h8000,
	       y__h8077,
	       y__h8078,
	       y__h8138,
	       y__h8215,
	       y__h8216,
	       y__h8276,
	       y__h8353,
	       y__h8354,
	       y__h8414,
	       y__h8491,
	       y__h8492,
	       y__h8552,
	       y__h8629,
	       y__h8630,
	       y__h8690,
	       y_avValue_snd_snd__h13361;
  wire [5 : 0] x__h11478;
  wire [2 : 0] axi4_byte_shift__h11391, x__h12806, x__h4674;
  wire [1 : 0] axi_response_rresp__h10647;
  wire _0b1_SL_axi_xactor_f_arfifo_first__2_BITS_20_TO_ETC___d154,
       _0b1_SL_axi_xactor_f_awfifo_first__60_BITS_20_T_ETC___d368,
       _dand1rg_req_beat_EN_write,
       _dand1rg_state_EN_write,
       _dand2axi_xactor_f_wfifo_EN_deq,
       rg_child_req_count_69_EQ_rg_child_burst_66___d170,
       rg_child_res_count_03_EQ_rg_child_burst_66___d304;

  // action method axi4_side_m_awvalid
  assign CAN_FIRE_axi4_side_m_awvalid = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_awvalid = 1'd1 ;

  // value method axi4_side_m_awready
  assign AXI4_AWREADY = axi_xactor_f_awfifo_FULL_N ;

  // action method axi4_side_m_wvalid
  assign CAN_FIRE_axi4_side_m_wvalid = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_wvalid = 1'd1 ;

  // value method axi4_side_m_wready
  assign AXI4_WREADY = axi_xactor_f_wfifo_FULL_N ;

  // value method axi4_side_m_bvalid
  assign AXI4_BVALID = axi_xactor_f_bfifo_EMPTY_N ;

  // value method axi4_side_m_bid
  assign AXI4_BID = axi_xactor_f_bfifo_D_OUT[9:2] ;

  // value method axi4_side_m_bresp
  assign AXI4_BRESP = axi_xactor_f_bfifo_D_OUT[1:0] ;

  // action method axi4_side_m_bready
  assign CAN_FIRE_axi4_side_m_bready = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_bready = 1'd1 ;

  // action method axi4_side_m_arvalid
  assign CAN_FIRE_axi4_side_m_arvalid = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_arvalid = 1'd1 ;

  // value method axi4_side_m_arready
  assign AXI4_ARREADY = axi_xactor_f_arfifo_FULL_N ;

  // value method axi4_side_m_rvalid
  assign AXI4_RVALID = axi_xactor_f_rfifo_EMPTY_N ;

  // value method axi4_side_m_rid
  assign AXI4_RID = axi_xactor_f_rfifo_D_OUT[74:67] ;

  // value method axi4_side_m_rdata
  assign AXI4_RDATA = axi_xactor_f_rfifo_D_OUT[66:3] ;

  // value method axi4_side_m_rresp
  assign AXI4_RRESP = axi_xactor_f_rfifo_D_OUT[2:1] ;

  // value method axi4_side_m_rlast
  assign AXI4_RLAST = axi_xactor_f_rfifo_D_OUT[0] ;

  // action method axi4_side_m_rready
  assign CAN_FIRE_axi4_side_m_rready = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_rready = 1'd1 ;

  // value method apb_side_m_paddr
  assign APB_PADDR = apb_xactor_rg_request[44:13] ;

  // value method apb_side_m_prot
  assign APB_PROT = apb_xactor_rg_request[12:10] ;

  // value method apb_side_m_penable
  assign APB_PENABLE = apb_xactor_rg_enable ;

  // value method apb_side_m_pwrite
  assign APB_PWRITE = apb_xactor_rg_request[9] ;

  // value method apb_side_m_pwdata
  assign APB_PWDATA = apb_xactor_rg_request[8:1] ;

  // value method apb_side_m_pstrb
  assign APB_PSTRB = apb_xactor_rg_request[0] ;

  // value method apb_side_m_psel
  assign APB_PSEL = apb_xactor_rg_sel ;

  // action method apb_side_m_pready
  assign CAN_FIRE_apb_side_m_pready = 1'd1 ;
  assign WILL_FIRE_apb_side_m_pready = 1'd1 ;

  // submodule apb_xactor_ff_response
  FIFOL1 #(.width(32'd9)) apb_xactor_ff_response(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(apb_xactor_ff_response_D_IN),
						 .ENQ(apb_xactor_ff_response_ENQ),
						 .DEQ(apb_xactor_ff_response_DEQ),
						 .CLR(apb_xactor_ff_response_CLR),
						 .D_OUT(apb_xactor_ff_response_D_OUT),
						 .FULL_N(apb_xactor_ff_response_FULL_N),
						 .EMPTY_N(apb_xactor_ff_response_EMPTY_N));

  // submodule axi_xactor_f_arfifo
  FIFO2 #(.width(32'd69), .guarded(32'd1)) axi_xactor_f_arfifo(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(axi_xactor_f_arfifo_D_IN),
							       .ENQ(axi_xactor_f_arfifo_ENQ),
							       .DEQ(axi_xactor_f_arfifo_DEQ),
							       .CLR(axi_xactor_f_arfifo_CLR),
							       .D_OUT(axi_xactor_f_arfifo_D_OUT),
							       .FULL_N(axi_xactor_f_arfifo_FULL_N),
							       .EMPTY_N(axi_xactor_f_arfifo_EMPTY_N));

  // submodule axi_xactor_f_awfifo
  FIFO2 #(.width(32'd69), .guarded(32'd1)) axi_xactor_f_awfifo(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(axi_xactor_f_awfifo_D_IN),
							       .ENQ(axi_xactor_f_awfifo_ENQ),
							       .DEQ(axi_xactor_f_awfifo_DEQ),
							       .CLR(axi_xactor_f_awfifo_CLR),
							       .D_OUT(axi_xactor_f_awfifo_D_OUT),
							       .FULL_N(axi_xactor_f_awfifo_FULL_N),
							       .EMPTY_N(axi_xactor_f_awfifo_EMPTY_N));

  // submodule axi_xactor_f_bfifo
  FIFO2 #(.width(32'd10), .guarded(32'd1)) axi_xactor_f_bfifo(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(axi_xactor_f_bfifo_D_IN),
							      .ENQ(axi_xactor_f_bfifo_ENQ),
							      .DEQ(axi_xactor_f_bfifo_DEQ),
							      .CLR(axi_xactor_f_bfifo_CLR),
							      .D_OUT(axi_xactor_f_bfifo_D_OUT),
							      .FULL_N(axi_xactor_f_bfifo_FULL_N),
							      .EMPTY_N(axi_xactor_f_bfifo_EMPTY_N));

  // submodule axi_xactor_f_rfifo
  FIFO2 #(.width(32'd75), .guarded(32'd1)) axi_xactor_f_rfifo(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(axi_xactor_f_rfifo_D_IN),
							      .ENQ(axi_xactor_f_rfifo_ENQ),
							      .DEQ(axi_xactor_f_rfifo_DEQ),
							      .CLR(axi_xactor_f_rfifo_CLR),
							      .D_OUT(axi_xactor_f_rfifo_D_OUT),
							      .FULL_N(axi_xactor_f_rfifo_FULL_N),
							      .EMPTY_N(axi_xactor_f_rfifo_EMPTY_N));

  // submodule axi_xactor_f_wfifo
  FIFO2 #(.width(32'd73), .guarded(32'd1)) axi_xactor_f_wfifo(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(axi_xactor_f_wfifo_D_IN),
							      .ENQ(axi_xactor_f_wfifo_ENQ),
							      .DEQ(axi_xactor_f_wfifo_DEQ),
							      .CLR(axi_xactor_f_wfifo_CLR),
							      .D_OUT(axi_xactor_f_wfifo_D_OUT),
							      .FULL_N(axi_xactor_f_wfifo_FULL_N),
							      .EMPTY_N(axi_xactor_f_wfifo_EMPTY_N));

  // rule RL_rl_read_frm_axi
  assign CAN_FIRE_RL_rl_read_frm_axi =
	     axi_xactor_f_arfifo_EMPTY_N && !apb_xactor_ff_request_rv[45] &&
	     rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_read_frm_axi = CAN_FIRE_RL_rl_read_frm_axi ;

  // rule RL_rl_read_response_to_axi
  assign CAN_FIRE_RL_rl_read_response_to_axi =
	     apb_xactor_ff_response_EMPTY_N && axi_xactor_f_rfifo_FULL_N &&
	     rg_state == 2'd1 &&
	     rg_resp_beat != 8'd0 ;
  assign WILL_FIRE_RL_rl_read_response_to_axi =
	     CAN_FIRE_RL_rl_read_response_to_axi ;

  // rule RL_rl_send_rd_burst_req
  assign CAN_FIRE_RL_rl_send_rd_burst_req =
	     !apb_xactor_ff_request_rv[45] && rg_state == 2'd1 &&
	     rg_req_beat != 8'd0 ;
  assign WILL_FIRE_RL_rl_send_rd_burst_req =
	     CAN_FIRE_RL_rl_send_rd_burst_req ;

  // rule RL_rl_write_frm_axi
  assign CAN_FIRE_RL_rl_write_frm_axi =
	     !apb_xactor_ff_request_rv[45] && axi_xactor_f_awfifo_EMPTY_N &&
	     axi_xactor_f_wfifo_EMPTY_N &&
	     rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_write_frm_axi =
	     CAN_FIRE_RL_rl_write_frm_axi && !WILL_FIRE_RL_rl_read_frm_axi ;

  // rule RL_rl_write_response_to_axi
  assign CAN_FIRE_RL_rl_write_response_to_axi =
	     apb_xactor_ff_response_EMPTY_N && axi_xactor_f_bfifo_FULL_N &&
	     rg_state == 2'd2 &&
	     rg_resp_beat != 8'd0 ;
  assign WILL_FIRE_RL_rl_write_response_to_axi =
	     CAN_FIRE_RL_rl_write_response_to_axi ;

  // rule RL_rl_send_wr_burst_req
  assign CAN_FIRE_RL_rl_send_wr_burst_req =
	     !apb_xactor_ff_request_rv[45] && axi_xactor_f_wfifo_EMPTY_N &&
	     rg_state == 2'd2 &&
	     rg_req_beat != 8'd0 ;
  assign WILL_FIRE_RL_rl_send_wr_burst_req =
	     CAN_FIRE_RL_rl_send_wr_burst_req ;

  // rule RL_apb_xactor_rl_idle_to_setup
  assign CAN_FIRE_RL_apb_xactor_rl_idle_to_setup =
	     apb_xactor_ff_request_rv_port1__read[45] &&
	     apb_xactor_rg_state == 2'd0 ;
  assign WILL_FIRE_RL_apb_xactor_rl_idle_to_setup =
	     CAN_FIRE_RL_apb_xactor_rl_idle_to_setup ;

  // rule RL_apb_xactor_rl_setup_state
  assign CAN_FIRE_RL_apb_xactor_rl_setup_state = apb_xactor_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_apb_xactor_rl_setup_state =
	     CAN_FIRE_RL_apb_xactor_rl_setup_state ;

  // rule RL_apb_xactor_rl_access_to_idle
  assign CAN_FIRE_RL_apb_xactor_rl_access_to_idle =
	     apb_xactor_ff_response_FULL_N && apb_xactor_rg_state == 2'd2 &&
	     APB_PREADY &&
	     !apb_xactor_ff_request_rv_port1__read[45] ;
  assign WILL_FIRE_RL_apb_xactor_rl_access_to_idle =
	     CAN_FIRE_RL_apb_xactor_rl_access_to_idle ;

  // rule RL_apb_xactor_rl_access_to_setup
  assign CAN_FIRE_RL_apb_xactor_rl_access_to_setup =
	     apb_xactor_ff_request_rv_port1__read[45] &&
	     apb_xactor_ff_response_FULL_N &&
	     apb_xactor_rg_state == 2'd2 &&
	     APB_PREADY ;
  assign WILL_FIRE_RL_apb_xactor_rl_access_to_setup =
	     CAN_FIRE_RL_apb_xactor_rl_access_to_setup ;

  // inputs to muxes for submodule ports
  assign MUX_apb_xactor_rg_enable_write_1__SEL_1 =
	     WILL_FIRE_RL_apb_xactor_rl_access_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_access_to_idle ||
	     WILL_FIRE_RL_apb_xactor_rl_idle_to_setup ;
  assign MUX_apb_xactor_rg_sel_write_1__SEL_2 =
	     WILL_FIRE_RL_apb_xactor_rl_access_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_idle_to_setup ;
  assign MUX_rg_child_req_count_write_1__PSEL_1 =
	     WILL_FIRE_RL_rl_send_wr_burst_req ||
	     WILL_FIRE_RL_rl_send_rd_burst_req ;
  assign MUX_rg_child_req_count_write_1__SEL_1 =
	     MUX_rg_child_req_count_write_1__PSEL_1 &&
	     (rg_child_burst != 8'd0 ||
	      !rg_child_req_count_69_EQ_rg_child_burst_66___d170) ;
  assign MUX_rg_child_res_count_write_1__PSEL_1 =
	     WILL_FIRE_RL_rl_write_response_to_axi ||
	     WILL_FIRE_RL_rl_read_response_to_axi ;
  assign MUX_rg_child_res_count_write_1__SEL_1 =
	     MUX_rg_child_res_count_write_1__PSEL_1 &&
	     rg_child_burst != 8'd0 ;
  assign MUX_rg_rd_request_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_send_rd_burst_req &&
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ;
  assign MUX_rg_req_beat_write_1__SEL_1 =
	     MUX_rg_child_req_count_write_1__PSEL_1 &&
	     (rg_child_req_count == y__h13016 || rg_child_burst == 8'd0) ;
  assign MUX_rg_resp_beat_write_1__SEL_1 =
	     MUX_rg_child_res_count_write_1__PSEL_1 &&
	     (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	      rg_child_burst == 8'd0) ;
  assign MUX_rg_state_write_1__SEL_1 =
	     MUX_rg_child_res_count_write_1__PSEL_1 && rg_resp_beat == 8'd1 &&
	     (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	      rg_child_burst == 8'd0) ;
  assign MUX_rg_wr_request_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_send_wr_burst_req &&
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ;
  assign MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_1 =
	     { 1'd1,
	       axi_xactor_f_arfifo_D_OUT[60:29],
	       axi_xactor_f_arfifo_D_OUT[10:8],
	       1'd0,
	       8'bxxxxxxxx /* unspecified value */ ,
	       1'd0 } ;
  assign MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_2 =
	     { 1'd1,
	       v__h4507,
	       rg_rd_request[10:8],
	       1'd0,
	       8'bxxxxxxxx /* unspecified value */ ,
	       1'd0 } ;
  assign MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_3 =
	     { 1'd1,
	       axi_xactor_f_awfifo_D_OUT[60:29],
	       axi_xactor_f_awfifo_D_OUT[10:8],
	       1'd1,
	       x__h11454[7:0],
	       x__h11536[0] } ;
  assign MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_4 =
	     { 1'd1,
	       apb_request_paddr__h13349,
	       rg_wr_request[10:8],
	       1'd1,
	       x__h13359[7:0],
	       x__h13386[0] } ;
  assign MUX_rg_accum_err_write_1__VAL_1 =
	     rg_accum_err || apb_xactor_ff_response_D_OUT[0] ;
  assign MUX_rg_accum_mask_write_1__VAL_1 =
	     { rg_accum_mask[6:0], rg_accum_mask[7] } ;
  assign MUX_rg_accum_mask_write_1__VAL_2 =
	     _0b1_SL_axi_xactor_f_arfifo_first__2_BITS_20_TO_ETC___d154 ?
	       8'd255 :
	       8'd1 ;
  assign MUX_rg_accum_mask_write_1__VAL_3 =
	     _0b1_SL_axi_xactor_f_awfifo_first__60_BITS_20_T_ETC___d368 ?
	       8'd255 :
	       8'd1 ;
  assign MUX_rg_child_burst_write_1__VAL_1 =
	     _0b1_SL_axi_xactor_f_arfifo_first__2_BITS_20_TO_ETC___d154 ?
	       8'd0 :
	       request_size__h4177 ;
  assign MUX_rg_child_burst_write_1__VAL_2 =
	     _0b1_SL_axi_xactor_f_awfifo_first__60_BITS_20_T_ETC___d368 ?
	       8'd0 :
	       request_size__h11389 ;
  assign MUX_rg_child_req_count_write_1__VAL_1 =
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ?
	       8'd1 :
	       x__h12673 ;
  assign MUX_rg_child_req_count_write_1__VAL_2 =
	     _0b1_SL_axi_xactor_f_arfifo_first__2_BITS_20_TO_ETC___d154 ?
	       8'd0 :
	       8'd1 ;
  assign MUX_rg_child_req_count_write_1__VAL_3 =
	     _0b1_SL_axi_xactor_f_awfifo_first__60_BITS_20_T_ETC___d368 ?
	       8'd0 :
	       8'd1 ;
  assign MUX_rg_child_res_count_write_1__VAL_1 =
	     rg_child_res_count_03_EQ_rg_child_burst_66___d304 ?
	       8'd1 :
	       x__h14140 ;
  assign MUX_rg_rd_request_write_1__VAL_1 =
	     { rg_rd_request[68:61],
	       new_address__h4502,
	       rg_rd_request[28:0] } ;
  assign MUX_rg_req_beat_write_1__VAL_1 = rg_req_beat - 8'd1 ;
  assign MUX_rg_req_beat_write_1__VAL_2 =
	     _0b1_SL_axi_xactor_f_arfifo_first__2_BITS_20_TO_ETC___d154 ?
	       axi_xactor_f_arfifo_D_OUT[28:21] :
	       x__h4233 ;
  assign MUX_rg_req_beat_write_1__VAL_3 =
	     _0b1_SL_axi_xactor_f_awfifo_first__60_BITS_20_T_ETC___d368 ?
	       axi_xactor_f_awfifo_D_OUT[28:21] :
	       x__h11759 ;
  assign MUX_rg_resp_beat_write_1__VAL_1 = rg_resp_beat - 8'd1 ;
  assign MUX_rg_wr_request_write_1__VAL_1 =
	     { rg_wr_request[68:61],
	       new_address__h12637,
	       rg_wr_request[28:0] } ;

  // inlined wires
  assign apb_xactor_ff_request_rv_EN_port0__write =
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_send_rd_burst_req ||
	     WILL_FIRE_RL_rl_write_frm_axi ||
	     WILL_FIRE_RL_rl_send_wr_burst_req ;
  always@(WILL_FIRE_RL_rl_read_frm_axi or
	  MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_1 or
	  WILL_FIRE_RL_rl_send_rd_burst_req or
	  MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_2 or
	  WILL_FIRE_RL_rl_write_frm_axi or
	  MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_3 or
	  WILL_FIRE_RL_rl_send_wr_burst_req or
	  MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_read_frm_axi:
	  apb_xactor_ff_request_rv_port0__write_1 =
	      MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_1;
      WILL_FIRE_RL_rl_send_rd_burst_req:
	  apb_xactor_ff_request_rv_port0__write_1 =
	      MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_2;
      WILL_FIRE_RL_rl_write_frm_axi:
	  apb_xactor_ff_request_rv_port0__write_1 =
	      MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_3;
      WILL_FIRE_RL_rl_send_wr_burst_req:
	  apb_xactor_ff_request_rv_port0__write_1 =
	      MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_4;
      default: apb_xactor_ff_request_rv_port0__write_1 =
		   46'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign apb_xactor_ff_request_rv_port1__read =
	     apb_xactor_ff_request_rv_EN_port0__write ?
	       apb_xactor_ff_request_rv_port0__write_1 :
	       apb_xactor_ff_request_rv ;
  assign apb_xactor_ff_request_rv_port1__write_1 =
	     { 1'd0,
	       45'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign apb_xactor_ff_request_rv_port2__read =
	     MUX_apb_xactor_rg_sel_write_1__SEL_2 ?
	       apb_xactor_ff_request_rv_port1__write_1 :
	       apb_xactor_ff_request_rv_port1__read ;

  // register apb_xactor_ff_request_rv
  assign apb_xactor_ff_request_rv_D_IN =
	     apb_xactor_ff_request_rv_port2__read ;
  assign apb_xactor_ff_request_rv_EN = 1'b1 ;

  // register apb_xactor_rg_enable
  assign apb_xactor_rg_enable_D_IN =
	     !MUX_apb_xactor_rg_enable_write_1__SEL_1 ;
  assign apb_xactor_rg_enable_EN =
	     WILL_FIRE_RL_apb_xactor_rl_access_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_access_to_idle ||
	     WILL_FIRE_RL_apb_xactor_rl_idle_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_setup_state ;

  // register apb_xactor_rg_request
  assign apb_xactor_rg_request_D_IN =
	     apb_xactor_ff_request_rv_port1__read[44:0] ;
  assign apb_xactor_rg_request_EN = MUX_apb_xactor_rg_sel_write_1__SEL_2 ;

  // register apb_xactor_rg_sel
  assign apb_xactor_rg_sel_D_IN = !WILL_FIRE_RL_apb_xactor_rl_access_to_idle ;
  assign apb_xactor_rg_sel_EN =
	     WILL_FIRE_RL_apb_xactor_rl_access_to_idle ||
	     WILL_FIRE_RL_apb_xactor_rl_access_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_idle_to_setup ;

  // register apb_xactor_rg_state
  always@(WILL_FIRE_RL_apb_xactor_rl_access_to_idle or
	  MUX_apb_xactor_rg_sel_write_1__SEL_2 or
	  WILL_FIRE_RL_apb_xactor_rl_setup_state)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_apb_xactor_rl_access_to_idle:
	  apb_xactor_rg_state_D_IN = 2'd0;
      MUX_apb_xactor_rg_sel_write_1__SEL_2: apb_xactor_rg_state_D_IN = 2'd1;
      WILL_FIRE_RL_apb_xactor_rl_setup_state: apb_xactor_rg_state_D_IN = 2'd2;
      default: apb_xactor_rg_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign apb_xactor_rg_state_EN =
	     WILL_FIRE_RL_apb_xactor_rl_access_to_idle ||
	     WILL_FIRE_RL_apb_xactor_rl_access_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_idle_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_setup_state ;

  // register rg_accum_data
  assign rg_accum_data_D_IN = v__h5506 ;
  assign rg_accum_data_EN = CAN_FIRE_RL_rl_read_response_to_axi ;

  // register rg_accum_err
  assign rg_accum_err_D_IN =
	     WILL_FIRE_RL_rl_write_response_to_axi &&
	     MUX_rg_accum_err_write_1__VAL_1 ;
  assign rg_accum_err_EN =
	     WILL_FIRE_RL_rl_write_response_to_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_accum_mask
  always@(WILL_FIRE_RL_rl_read_response_to_axi or
	  MUX_rg_accum_mask_write_1__VAL_1 or
	  WILL_FIRE_RL_rl_read_frm_axi or
	  MUX_rg_accum_mask_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_write_frm_axi or MUX_rg_accum_mask_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_read_response_to_axi:
	  rg_accum_mask_D_IN = MUX_rg_accum_mask_write_1__VAL_1;
      WILL_FIRE_RL_rl_read_frm_axi:
	  rg_accum_mask_D_IN = MUX_rg_accum_mask_write_1__VAL_2;
      WILL_FIRE_RL_rl_write_frm_axi:
	  rg_accum_mask_D_IN = MUX_rg_accum_mask_write_1__VAL_3;
      default: rg_accum_mask_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign rg_accum_mask_EN =
	     WILL_FIRE_RL_rl_read_response_to_axi ||
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_child_burst
  assign rg_child_burst_D_IN =
	     WILL_FIRE_RL_rl_read_frm_axi ?
	       MUX_rg_child_burst_write_1__VAL_1 :
	       MUX_rg_child_burst_write_1__VAL_2 ;
  assign rg_child_burst_EN =
	     WILL_FIRE_RL_rl_read_frm_axi || WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_child_req_count
  always@(MUX_rg_child_req_count_write_1__SEL_1 or
	  MUX_rg_child_req_count_write_1__VAL_1 or
	  WILL_FIRE_RL_rl_read_frm_axi or
	  MUX_rg_child_req_count_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_write_frm_axi or
	  MUX_rg_child_req_count_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_child_req_count_write_1__SEL_1:
	  rg_child_req_count_D_IN = MUX_rg_child_req_count_write_1__VAL_1;
      WILL_FIRE_RL_rl_read_frm_axi:
	  rg_child_req_count_D_IN = MUX_rg_child_req_count_write_1__VAL_2;
      WILL_FIRE_RL_rl_write_frm_axi:
	  rg_child_req_count_D_IN = MUX_rg_child_req_count_write_1__VAL_3;
      default: rg_child_req_count_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign rg_child_req_count_EN =
	     (WILL_FIRE_RL_rl_send_wr_burst_req ||
	      WILL_FIRE_RL_rl_send_rd_burst_req) &&
	     (rg_child_burst != 8'd0 ||
	      !rg_child_req_count_69_EQ_rg_child_burst_66___d170) ||
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_child_res_count
  always@(MUX_rg_child_res_count_write_1__SEL_1 or
	  MUX_rg_child_res_count_write_1__VAL_1 or
	  WILL_FIRE_RL_rl_read_frm_axi or
	  MUX_rg_child_req_count_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_write_frm_axi or
	  MUX_rg_child_req_count_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_child_res_count_write_1__SEL_1:
	  rg_child_res_count_D_IN = MUX_rg_child_res_count_write_1__VAL_1;
      WILL_FIRE_RL_rl_read_frm_axi:
	  rg_child_res_count_D_IN = MUX_rg_child_req_count_write_1__VAL_2;
      WILL_FIRE_RL_rl_write_frm_axi:
	  rg_child_res_count_D_IN = MUX_rg_child_req_count_write_1__VAL_3;
      default: rg_child_res_count_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign rg_child_res_count_EN =
	     (WILL_FIRE_RL_rl_write_response_to_axi ||
	      WILL_FIRE_RL_rl_read_response_to_axi) &&
	     rg_child_burst != 8'd0 ||
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_rd_request
  assign rg_rd_request_D_IN =
	     MUX_rg_rd_request_write_1__SEL_1 ?
	       MUX_rg_rd_request_write_1__VAL_1 :
	       axi_xactor_f_arfifo_D_OUT ;
  assign rg_rd_request_EN =
	     WILL_FIRE_RL_rl_send_rd_burst_req &&
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ||
	     WILL_FIRE_RL_rl_read_frm_axi ;

  // register rg_req_beat
  always@(MUX_rg_req_beat_write_1__SEL_1 or
	  MUX_rg_req_beat_write_1__VAL_1 or
	  WILL_FIRE_RL_rl_read_frm_axi or
	  MUX_rg_req_beat_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_write_frm_axi or MUX_rg_req_beat_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_req_beat_write_1__SEL_1:
	  rg_req_beat_D_IN = MUX_rg_req_beat_write_1__VAL_1;
      WILL_FIRE_RL_rl_read_frm_axi:
	  rg_req_beat_D_IN = MUX_rg_req_beat_write_1__VAL_2;
      WILL_FIRE_RL_rl_write_frm_axi:
	  rg_req_beat_D_IN = MUX_rg_req_beat_write_1__VAL_3;
      default: rg_req_beat_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign rg_req_beat_EN =
	     _dand1rg_req_beat_EN_write || WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_resp_beat
  always@(MUX_rg_resp_beat_write_1__SEL_1 or
	  MUX_rg_resp_beat_write_1__VAL_1 or
	  WILL_FIRE_RL_rl_read_frm_axi or
	  x__h4233 or WILL_FIRE_RL_rl_write_frm_axi or x__h11759)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_resp_beat_write_1__SEL_1:
	  rg_resp_beat_D_IN = MUX_rg_resp_beat_write_1__VAL_1;
      WILL_FIRE_RL_rl_read_frm_axi: rg_resp_beat_D_IN = x__h4233;
      WILL_FIRE_RL_rl_write_frm_axi: rg_resp_beat_D_IN = x__h11759;
      default: rg_resp_beat_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign rg_resp_beat_EN =
	     (WILL_FIRE_RL_rl_write_response_to_axi ||
	      WILL_FIRE_RL_rl_read_response_to_axi) &&
	     (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	      rg_child_burst == 8'd0) ||
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_state
  always@(MUX_rg_state_write_1__SEL_1 or
	  WILL_FIRE_RL_rl_read_frm_axi or WILL_FIRE_RL_rl_write_frm_axi)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_state_write_1__SEL_1: rg_state_D_IN = 2'd0;
      WILL_FIRE_RL_rl_read_frm_axi: rg_state_D_IN = 2'd1;
      WILL_FIRE_RL_rl_write_frm_axi: rg_state_D_IN = 2'd2;
      default: rg_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign rg_state_EN =
	     _dand1rg_state_EN_write || WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_wd_request
  assign rg_wd_request_D_IN = axi_xactor_f_wfifo_D_OUT ;
  assign rg_wd_request_EN = WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_wr_request
  assign rg_wr_request_D_IN =
	     MUX_rg_wr_request_write_1__SEL_1 ?
	       MUX_rg_wr_request_write_1__VAL_1 :
	       axi_xactor_f_awfifo_D_OUT ;
  assign rg_wr_request_EN =
	     WILL_FIRE_RL_rl_send_wr_burst_req &&
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // submodule apb_xactor_ff_response
  assign apb_xactor_ff_response_D_IN = { APB_PRDATA, APB_PSLVERR } ;
  assign apb_xactor_ff_response_ENQ =
	     WILL_FIRE_RL_apb_xactor_rl_access_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_access_to_idle ;
  assign apb_xactor_ff_response_DEQ = MUX_rg_child_res_count_write_1__PSEL_1 ;
  assign apb_xactor_ff_response_CLR = 1'b0 ;

  // submodule axi_xactor_f_arfifo
  assign axi_xactor_f_arfifo_D_IN =
	     { AXI4_ARID,
	       AXI4_ARADDR,
	       AXI4_ARLEN,
	       AXI4_ARSIZE,
	       AXI4_ARBURST,
	       AXI4_ARLOCK,
	       AXI4_ARCACHE,
	       AXI4_ARPROT,
	       AXI4_ARQOS,
	       AXI4_ARREGION } ;
  assign axi_xactor_f_arfifo_ENQ =
	     AXI4_ARVALID && axi_xactor_f_arfifo_FULL_N ;
  assign axi_xactor_f_arfifo_DEQ = CAN_FIRE_RL_rl_read_frm_axi ;
  assign axi_xactor_f_arfifo_CLR = 1'b0 ;

  // submodule axi_xactor_f_awfifo
  assign axi_xactor_f_awfifo_D_IN =
	     { AXI4_AWID,
	       AXI4_AWADDR,
	       AXI4_AWLEN,
	       AXI4_AWSIZE,
	       AXI4_AWBURST,
	       AXI4_AWLOCK,
	       AXI4_AWCACHE,
	       AXI4_AWPROT,
	       AXI4_AWQOS,
	       AXI4_AWREGION } ;
  assign axi_xactor_f_awfifo_ENQ =
	     AXI4_AWVALID && axi_xactor_f_awfifo_FULL_N ;
  assign axi_xactor_f_awfifo_DEQ = WILL_FIRE_RL_rl_write_frm_axi ;
  assign axi_xactor_f_awfifo_CLR = 1'b0 ;

  // submodule axi_xactor_f_bfifo
  assign axi_xactor_f_bfifo_D_IN =
	     { rg_wr_request[68:61],
	       (rg_accum_err || apb_xactor_ff_response_D_OUT[0]) ?
		 2'b10 :
		 2'b0 } ;
  assign axi_xactor_f_bfifo_ENQ =
	     WILL_FIRE_RL_rl_write_response_to_axi && rg_resp_beat == 8'd1 &&
	     (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	      rg_child_burst == 8'd0) ;
  assign axi_xactor_f_bfifo_DEQ = AXI4_BREADY && axi_xactor_f_bfifo_EMPTY_N ;
  assign axi_xactor_f_bfifo_CLR = 1'b0 ;

  // submodule axi_xactor_f_rfifo
  assign axi_xactor_f_rfifo_D_IN =
	     { rg_rd_request[68:61],
	       v__h5506,
	       axi_response_rresp__h10647,
	       rg_resp_beat == 8'd1 } ;
  assign axi_xactor_f_rfifo_ENQ =
	     WILL_FIRE_RL_rl_read_response_to_axi &&
	     (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	      rg_child_burst == 8'd0) ;
  assign axi_xactor_f_rfifo_DEQ = AXI4_RREADY && axi_xactor_f_rfifo_EMPTY_N ;
  assign axi_xactor_f_rfifo_CLR = 1'b0 ;

  // submodule axi_xactor_f_wfifo
  assign axi_xactor_f_wfifo_D_IN = { AXI4_WDATA, AXI4_WSTRB, AXI4_WLAST } ;
  assign axi_xactor_f_wfifo_ENQ = AXI4_WVALID && axi_xactor_f_wfifo_FULL_N ;
  assign axi_xactor_f_wfifo_DEQ =
	     WILL_FIRE_RL_rl_write_frm_axi &&
	     _0b1_SL_axi_xactor_f_awfifo_first__60_BITS_20_T_ETC___d368 ||
	     _dand2axi_xactor_f_wfifo_EN_deq ;
  assign axi_xactor_f_wfifo_CLR = 1'b0 ;

  // remaining internal signals
  assign _0b1_SL_axi_xactor_f_arfifo_first__2_BITS_20_TO_ETC___d154 =
	     request_size__h4177 <= 8'd1 ;
  assign _0b1_SL_axi_xactor_f_awfifo_first__60_BITS_20_T_ETC___d368 =
	     request_size__h11389 <= 8'd1 ;
  assign _dand1rg_req_beat_EN_write =
	     (WILL_FIRE_RL_rl_send_wr_burst_req ||
	      WILL_FIRE_RL_rl_send_rd_burst_req) &&
	     (rg_child_req_count == y__h13016 || rg_child_burst == 8'd0) ;
  assign _dand1rg_state_EN_write =
	     (WILL_FIRE_RL_rl_write_response_to_axi ||
	      WILL_FIRE_RL_rl_read_response_to_axi) &&
	     rg_resp_beat == 8'd1 &&
	     (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	      rg_child_burst == 8'd0) ;
  assign _dand2axi_xactor_f_wfifo_EN_deq =
	     WILL_FIRE_RL_rl_send_wr_burst_req &&
	     (rg_child_req_count == y__h13016 || rg_child_burst == 8'd0) ;
  assign apb_request_paddr__h13349 =
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ?
	       new_address__h12637 :
	       y_avValue_fst__h12976 ;
  assign apb_xactor_ff_response_first__37_BITS_8_TO_1_3_ETC___d270 =
	     { x__h6277 | y__h6278,
	       x__h7800 | y__h7801,
	       x__h7938 | y__h7939,
	       x__h8076 | y__h8077 } ;
  assign apb_xactor_ff_response_first__37_BITS_8_TO_1_3_ETC___d285 =
	     { apb_xactor_ff_response_first__37_BITS_8_TO_1_3_ETC___d270,
	       x__h8214 | y__h8215,
	       x__h8352 | y__h8353 } ;
  assign axi4_byte_shift__h11391 =
	     (_0b1_SL_axi_xactor_f_awfifo_first__60_BITS_20_T_ETC___d368 &&
	      axi_xactor_f_awfifo_D_OUT[31:29] != 3'd0) ?
	       axi_xactor_f_awfifo_D_OUT[31:29] :
	       3'd0 ;
  assign axi_response_rresp__h10647 =
	     apb_xactor_ff_response_D_OUT[0] ? 2'b10 : 2'b0 ;
  assign mask__h12763 = 32'hFFFFFFFF << x__h12806 ;
  assign mask__h4633 = 32'hFFFFFFFF << x__h4674 ;
  assign new_address__h12761 =
	     rg_wr_request[60:29] +
	     (32'b00000000000000000000000000000001 << rg_wr_request[20:18]) ;
  assign new_address__h4631 =
	     rg_rd_request[60:29] +
	     (32'b00000000000000000000000000000001 << rg_rd_request[20:18]) ;
  assign request_size__h11389 =
	     8'b00000001 << axi_xactor_f_awfifo_D_OUT[20:18] ;
  assign request_size__h4177 =
	     8'b00000001 << axi_xactor_f_arfifo_D_OUT[20:18] ;
  assign rg_child_req_count_69_EQ_rg_child_burst_66___d170 =
	     rg_child_req_count == rg_child_burst ;
  assign rg_child_res_count_03_EQ_rg_child_burst_66___d304 =
	     rg_child_res_count == rg_child_burst ;
  assign shift__h12689 = { rg_child_req_count, 3'd0 } ;
  assign temp1__h12764 = rg_wr_request[60:29] & mask__h12763 ;
  assign temp1__h4634 = rg_rd_request[60:29] & mask__h4633 ;
  assign temp2__h12765 = new_address__h12761 & y__h12865 ;
  assign temp2__h4635 = new_address__h4631 & y__h4733 ;
  assign v__h4507 =
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ?
	       new_address__h4502 :
	       v__h4527 ;
  assign v__h4527 = rg_rd_request[60:29] + { 24'd0, rg_child_req_count } ;
  assign v__h5506 =
	     { apb_xactor_ff_response_first__37_BITS_8_TO_1_3_ETC___d285,
	       x__h8490 | y__h8491,
	       x__h8628 | y__h8629 } ;
  assign x__h11454 = axi_xactor_f_wfifo_D_OUT[72:9] >> x__h11478 ;
  assign x__h11478 = { axi4_byte_shift__h11391, 3'b0 } ;
  assign x__h11536 =
	     axi_xactor_f_wfifo_D_OUT[8:1] >> axi4_byte_shift__h11391 ;
  assign x__h11759 = axi_xactor_f_awfifo_D_OUT[28:21] + 8'd1 ;
  assign x__h12673 = rg_child_req_count + 8'd1 ;
  assign x__h12806 =
	     rg_wr_request[20:18] +
	     CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 ;
  assign x__h13359 =
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ?
	       axi_xactor_f_wfifo_D_OUT[72:9] :
	       y_avValue_snd_fst__h13360 ;
  assign x__h13386 =
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ?
	       axi_xactor_f_wfifo_D_OUT[8:1] :
	       y_avValue_snd_snd__h13361 ;
  assign x__h14140 = rg_child_res_count + 8'd1 ;
  assign x__h4233 = axi_xactor_f_arfifo_D_OUT[28:21] + 8'd1 ;
  assign x__h4674 =
	     rg_rd_request[20:18] +
	     CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 ;
  assign x__h6277 = apb_xactor_ff_response_D_OUT[8:1] & y__h6279 ;
  assign x__h7800 = apb_xactor_ff_response_D_OUT[8:1] & y__h7802 ;
  assign x__h7938 = apb_xactor_ff_response_D_OUT[8:1] & y__h7940 ;
  assign x__h8076 = apb_xactor_ff_response_D_OUT[8:1] & y__h8078 ;
  assign x__h8214 = apb_xactor_ff_response_D_OUT[8:1] & y__h8216 ;
  assign x__h8352 = apb_xactor_ff_response_D_OUT[8:1] & y__h8354 ;
  assign x__h8490 = apb_xactor_ff_response_D_OUT[8:1] & y__h8492 ;
  assign x__h8628 = apb_xactor_ff_response_D_OUT[8:1] & y__h8630 ;
  assign y__h12865 = ~mask__h12763 ;
  assign y__h13016 = rg_child_burst - 8'd1 ;
  assign y__h4733 = ~mask__h4633 ;
  assign y__h6278 = rg_accum_data[63:56] & y__h7723 ;
  assign y__h6279 = {8{rg_accum_mask[7]}} ;
  assign y__h7723 = ~y__h6279 ;
  assign y__h7801 = rg_accum_data[55:48] & y__h7862 ;
  assign y__h7802 = {8{rg_accum_mask[6]}} ;
  assign y__h7862 = ~y__h7802 ;
  assign y__h7939 = rg_accum_data[47:40] & y__h8000 ;
  assign y__h7940 = {8{rg_accum_mask[5]}} ;
  assign y__h8000 = ~y__h7940 ;
  assign y__h8077 = rg_accum_data[39:32] & y__h8138 ;
  assign y__h8078 = {8{rg_accum_mask[4]}} ;
  assign y__h8138 = ~y__h8078 ;
  assign y__h8215 = rg_accum_data[31:24] & y__h8276 ;
  assign y__h8216 = {8{rg_accum_mask[3]}} ;
  assign y__h8276 = ~y__h8216 ;
  assign y__h8353 = rg_accum_data[23:16] & y__h8414 ;
  assign y__h8354 = {8{rg_accum_mask[2]}} ;
  assign y__h8414 = ~y__h8354 ;
  assign y__h8491 = rg_accum_data[15:8] & y__h8552 ;
  assign y__h8492 = {8{rg_accum_mask[1]}} ;
  assign y__h8552 = ~y__h8492 ;
  assign y__h8629 = rg_accum_data[7:0] & y__h8690 ;
  assign y__h8630 = {8{rg_accum_mask[0]}} ;
  assign y__h8690 = ~y__h8630 ;
  assign y_avValue_fst__h12976 =
	     rg_wr_request[60:29] + { 24'd0, rg_child_req_count } ;
  assign y_avValue_snd_fst__h13360 =
	     axi_xactor_f_wfifo_D_OUT[72:9] >> shift__h12689 ;
  assign y_avValue_snd_snd__h13361 =
	     axi_xactor_f_wfifo_D_OUT[8:1] >> rg_child_req_count ;
  always@(rg_rd_request)
  begin
    case (rg_rd_request[28:21])
      8'd3: CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd2;
      8'd7: CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd3;
      8'd15: CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd4;
      default: CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd1;
    endcase
  end
  always@(rg_wr_request)
  begin
    case (rg_wr_request[28:21])
      8'd3: CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd2;
      8'd7: CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd3;
      8'd15: CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd4;
      default: CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd1;
    endcase
  end
  always@(rg_rd_request or temp1__h4634 or temp2__h4635 or new_address__h4631)
  begin
    case (rg_rd_request[17:16])
      2'b0: new_address__h4502 = rg_rd_request[60:29];
      2'b01: new_address__h4502 = new_address__h4631;
      default: new_address__h4502 = temp1__h4634 | temp2__h4635;
    endcase
  end
  always@(rg_wr_request or
	  temp1__h12764 or temp2__h12765 or new_address__h12761)
  begin
    case (rg_wr_request[17:16])
      2'b0: new_address__h12637 = rg_wr_request[60:29];
      2'b01: new_address__h12637 = new_address__h12761;
      default: new_address__h12637 = temp1__h12764 | temp2__h12765;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        apb_xactor_ff_request_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      45'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	apb_xactor_rg_enable <= `BSV_ASSIGNMENT_DELAY 1'd0;
	apb_xactor_rg_request <= `BSV_ASSIGNMENT_DELAY 45'd0;
	apb_xactor_rg_sel <= `BSV_ASSIGNMENT_DELAY 1'd0;
	apb_xactor_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_accum_data <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_accum_err <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_accum_mask <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_child_burst <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_child_req_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_child_res_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_rd_request <= `BSV_ASSIGNMENT_DELAY 69'd0;
	rg_req_beat <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_resp_beat <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_wd_request <= `BSV_ASSIGNMENT_DELAY 73'd0;
	rg_wr_request <= `BSV_ASSIGNMENT_DELAY 69'd0;
      end
    else
      begin
        if (apb_xactor_ff_request_rv_EN)
	  apb_xactor_ff_request_rv <= `BSV_ASSIGNMENT_DELAY
	      apb_xactor_ff_request_rv_D_IN;
	if (apb_xactor_rg_enable_EN)
	  apb_xactor_rg_enable <= `BSV_ASSIGNMENT_DELAY
	      apb_xactor_rg_enable_D_IN;
	if (apb_xactor_rg_request_EN)
	  apb_xactor_rg_request <= `BSV_ASSIGNMENT_DELAY
	      apb_xactor_rg_request_D_IN;
	if (apb_xactor_rg_sel_EN)
	  apb_xactor_rg_sel <= `BSV_ASSIGNMENT_DELAY apb_xactor_rg_sel_D_IN;
	if (apb_xactor_rg_state_EN)
	  apb_xactor_rg_state <= `BSV_ASSIGNMENT_DELAY
	      apb_xactor_rg_state_D_IN;
	if (rg_accum_data_EN)
	  rg_accum_data <= `BSV_ASSIGNMENT_DELAY rg_accum_data_D_IN;
	if (rg_accum_err_EN)
	  rg_accum_err <= `BSV_ASSIGNMENT_DELAY rg_accum_err_D_IN;
	if (rg_accum_mask_EN)
	  rg_accum_mask <= `BSV_ASSIGNMENT_DELAY rg_accum_mask_D_IN;
	if (rg_child_burst_EN)
	  rg_child_burst <= `BSV_ASSIGNMENT_DELAY rg_child_burst_D_IN;
	if (rg_child_req_count_EN)
	  rg_child_req_count <= `BSV_ASSIGNMENT_DELAY rg_child_req_count_D_IN;
	if (rg_child_res_count_EN)
	  rg_child_res_count <= `BSV_ASSIGNMENT_DELAY rg_child_res_count_D_IN;
	if (rg_rd_request_EN)
	  rg_rd_request <= `BSV_ASSIGNMENT_DELAY rg_rd_request_D_IN;
	if (rg_req_beat_EN)
	  rg_req_beat <= `BSV_ASSIGNMENT_DELAY rg_req_beat_D_IN;
	if (rg_resp_beat_EN)
	  rg_resp_beat <= `BSV_ASSIGNMENT_DELAY rg_resp_beat_D_IN;
	if (rg_state_EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state_D_IN;
	if (rg_wd_request_EN)
	  rg_wd_request <= `BSV_ASSIGNMENT_DELAY rg_wd_request_D_IN;
	if (rg_wr_request_EN)
	  rg_wr_request <= `BSV_ASSIGNMENT_DELAY rg_wr_request_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    apb_xactor_ff_request_rv = 46'h2AAAAAAAAAAA;
    apb_xactor_rg_enable = 1'h0;
    apb_xactor_rg_request = 45'h0AAAAAAAAAAA;
    apb_xactor_rg_sel = 1'h0;
    apb_xactor_rg_state = 2'h2;
    rg_accum_data = 64'hAAAAAAAAAAAAAAAA;
    rg_accum_err = 1'h0;
    rg_accum_mask = 8'hAA;
    rg_child_burst = 8'hAA;
    rg_child_req_count = 8'hAA;
    rg_child_res_count = 8'hAA;
    rg_rd_request = 69'h0AAAAAAAAAAAAAAAAA;
    rg_req_beat = 8'hAA;
    rg_resp_beat = 8'hAA;
    rg_state = 2'h2;
    rg_wd_request = 73'h0AAAAAAAAAAAAAAAAAA;
    rg_wr_request = 69'h0AAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d98 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d99 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d100 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d107 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b0;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d109 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b001;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d111 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b010;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d113 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b011;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d115 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b100;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d117 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b101;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d119 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b110;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d133 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b0 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b001 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b010 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b011 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b100 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b101 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b110;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d136 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[17:16] == 2'b0;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d138 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[17:16] == 2'b01;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d140 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[17:16] == 2'b10;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d146 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[17:16] != 2'b0 &&
	axi_xactor_f_arfifo_D_OUT[17:16] != 2'b01 &&
	axi_xactor_f_arfifo_D_OUT[17:16] != 2'b10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  v__h3859 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$fwrite(32'h80000002, "[%10d", v__h3859, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$fwrite(32'h80000002, "Axi2Apb: Axi4-Read:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$fwrite(32'h80000002,
		"{araddr:%0h",
		axi_xactor_f_arfifo_D_OUT[60:29],
		",arlen:%0d",
		axi_xactor_f_arfifo_D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d107)
	$fwrite(32'h80000002, "sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d109)
	$fwrite(32'h80000002, "sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d111)
	$fwrite(32'h80000002, "sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d113)
	$fwrite(32'h80000002, "sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d115)
	$fwrite(32'h80000002, "sz16");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d117)
	$fwrite(32'h80000002, "sz32");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d119)
	$fwrite(32'h80000002, "sz64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d133)
	$fwrite(32'h80000002, "sz128");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d136)
	$fwrite(32'h80000002, "fixed");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d138)
	$fwrite(32'h80000002, "incr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d140)
	$fwrite(32'h80000002, "wrap");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d146)
	$fwrite(32'h80000002, "burst:%0d", axi_xactor_f_arfifo_D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d147 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d148 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d149 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  v__h4073 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$fwrite(32'h80000002, "[%10d", v__h4073, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$fwrite(32'h80000002, "Axi2Apb: APB-Req  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$fwrite(32'h80000002,
		"{paddr:'h%0h,",
		axi_xactor_f_arfifo_D_OUT[60:29],
		"prot:%0d",
		axi_xactor_f_arfifo_D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$fwrite(32'h80000002, "read");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  !rg_child_res_count_03_EQ_rg_child_burst_66___d304 &&
	  rg_child_burst != 8'd0)
	begin
	  TASK_testplusargs___d309 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  !rg_child_res_count_03_EQ_rg_child_burst_66___d304 &&
	  rg_child_burst != 8'd0)
	begin
	  TASK_testplusargs___d310 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  !rg_child_res_count_03_EQ_rg_child_burst_66___d304 &&
	  rg_child_burst != 8'd0)
	begin
	  TASK_testplusargs___d311 = $test$plusargs("l0");
	  #0;
	end
    NOT_rg_child_res_count_03_EQ_rg_child_burst_66_ETC___d314 =
	!rg_child_res_count_03_EQ_rg_child_burst_66___d304 &&
	rg_child_burst != 8'd0 &&
	(TASK_testplusargs___d309 ||
	 TASK_testplusargs___d310 && TASK_testplusargs___d311);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  !rg_child_res_count_03_EQ_rg_child_burst_66___d304 &&
	  rg_child_burst != 8'd0)
	begin
	  v__h10460 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  NOT_rg_child_res_count_03_EQ_rg_child_burst_66_ETC___d314)
	$fwrite(32'h80000002, "[%10d", v__h10460, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  NOT_rg_child_res_count_03_EQ_rg_child_burst_66_ETC___d314)
	$fwrite(32'h80000002, "Axi2Apb: Accumulate");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  NOT_rg_child_res_count_03_EQ_rg_child_burst_66_ETC___d314)
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	   rg_child_burst == 8'd0))
	begin
	  TASK_testplusargs___d323 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	   rg_child_burst == 8'd0))
	begin
	  TASK_testplusargs___d324 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	   rg_child_burst == 8'd0))
	begin
	  TASK_testplusargs___d325 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_23_OR_TASK_testplusargs_24_A_ETC___d330 =
	(TASK_testplusargs___d323 ||
	 TASK_testplusargs___d324 && TASK_testplusargs___d325) &&
	apb_xactor_ff_response_D_OUT[0];
    TASK_testplusargs_23_OR_TASK_testplusargs_24_A_ETC___d333 =
	(TASK_testplusargs___d323 ||
	 TASK_testplusargs___d324 && TASK_testplusargs___d325) &&
	!apb_xactor_ff_response_D_OUT[0];
    TASK_testplusargs_23_OR_TASK_testplusargs_24_A_ETC___d335 =
	(TASK_testplusargs___d323 ||
	 TASK_testplusargs___d324 && TASK_testplusargs___d325) &&
	rg_resp_beat == 8'd1;
    TASK_testplusargs_23_OR_TASK_testplusargs_24_A_ETC___d338 =
	(TASK_testplusargs___d323 ||
	 TASK_testplusargs___d324 && TASK_testplusargs___d325) &&
	rg_resp_beat != 8'd1;
    rg_child_res_count_03_EQ_rg_child_burst_66_04__ETC___d328 =
	(rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	 rg_child_burst == 8'd0) &&
	(TASK_testplusargs___d323 ||
	 TASK_testplusargs___d324 && TASK_testplusargs___d325);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	   rg_child_burst == 8'd0))
	begin
	  v__h10733 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  rg_child_res_count_03_EQ_rg_child_burst_66_04__ETC___d328)
	$fwrite(32'h80000002, "[%10d", v__h10733, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  rg_child_res_count_03_EQ_rg_child_burst_66_04__ETC___d328)
	$fwrite(32'h80000002, "Axi2Apb: AXI-RdResp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  rg_child_res_count_03_EQ_rg_child_burst_66_04__ETC___d328)
	$fwrite(32'h80000002, "{rresp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	   rg_child_burst == 8'd0) &&
	  TASK_testplusargs_23_OR_TASK_testplusargs_24_A_ETC___d330)
	$fwrite(32'h80000002, "slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	   rg_child_burst == 8'd0) &&
	  TASK_testplusargs_23_OR_TASK_testplusargs_24_A_ETC___d333)
	$fwrite(32'h80000002, "okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  rg_child_res_count_03_EQ_rg_child_burst_66_04__ETC___d328)
	$fwrite(32'h80000002, ",rdata:%0h", v__h5506);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	   rg_child_burst == 8'd0) &&
	  TASK_testplusargs_23_OR_TASK_testplusargs_24_A_ETC___d335)
	$fwrite(32'h80000002, ",rlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_03_EQ_rg_child_burst_66___d304 ||
	   rg_child_burst == 8'd0) &&
	  TASK_testplusargs_23_OR_TASK_testplusargs_24_A_ETC___d338)
	$fwrite(32'h80000002, ",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  rg_child_res_count_03_EQ_rg_child_burst_66_04__ETC___d328)
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  rg_child_res_count_03_EQ_rg_child_burst_66_04__ETC___d328)
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d341 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d342 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d343 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_41_OR_TASK_testplusargs_42_A_ETC___d347 =
	(TASK_testplusargs___d341 ||
	 TASK_testplusargs___d342 && TASK_testplusargs___d343) &&
	apb_xactor_ff_response_D_OUT[0];
    TASK_testplusargs_41_OR_TASK_testplusargs_42_A_ETC___d348 =
	(TASK_testplusargs___d341 ||
	 TASK_testplusargs___d342 && TASK_testplusargs___d343) &&
	!apb_xactor_ff_response_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  v__h11111 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d341 ||
	   TASK_testplusargs___d342 && TASK_testplusargs___d343))
	$fwrite(32'h80000002, "[%10d", v__h11111, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d341 ||
	   TASK_testplusargs___d342 && TASK_testplusargs___d343))
	$fwrite(32'h80000002, "Axi2Apb: APB-Resp: Count:%2d", rg_resp_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d341 ||
	   TASK_testplusargs___d342 && TASK_testplusargs___d343))
	$fwrite(32'h80000002,
		"{prdata:'h%0h pslverr:",
		apb_xactor_ff_response_D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_41_OR_TASK_testplusargs_42_A_ETC___d347)
	$fwrite(32'h80000002, "slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_41_OR_TASK_testplusargs_42_A_ETC___d348)
	$fwrite(32'h80000002, "okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d341 ||
	   TASK_testplusargs___d342 && TASK_testplusargs___d343))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d341 ||
	   TASK_testplusargs___d342 && TASK_testplusargs___d343))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d349 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d350 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d351 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  v__h11268 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d349 ||
	   TASK_testplusargs___d350 && TASK_testplusargs___d351))
	$fwrite(32'h80000002, "[%10d", v__h11268, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d349 ||
	   TASK_testplusargs___d350 && TASK_testplusargs___d351))
	$fwrite(32'h80000002,
		"Axi2Apb: Child:%d ChildRes:%d Mask:%b Accum:%h",
		rg_child_burst,
		rg_child_res_count,
		rg_accum_mask,
		rg_accum_data);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d349 ||
	   TASK_testplusargs___d350 && TASK_testplusargs___d351))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d211 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d212 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d213 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  v__h5083 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d211 ||
	   TASK_testplusargs___d212 && TASK_testplusargs___d213))
	$fwrite(32'h80000002, "[%10d", v__h5083, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d211 ||
	   TASK_testplusargs___d212 && TASK_testplusargs___d213))
	$fwrite(32'h80000002,
		"Axi2Apb: Axi4-RdBurst Addr:%h Count:%d",
		v__h4507,
		rg_req_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d211 ||
	   TASK_testplusargs___d212 && TASK_testplusargs___d213))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d217 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d218 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d219 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  v__h5241 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$fwrite(32'h80000002, "[%10d", v__h5241, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$fwrite(32'h80000002, "Axi2Apb: New APB-Req  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$fwrite(32'h80000002,
		"{paddr:'h%0h,",
		v__h4507,
		"prot:%0d",
		rg_rd_request[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$fwrite(32'h80000002, "read");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d223 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d224 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d225 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  v__h5401 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d223 ||
	   TASK_testplusargs___d224 && TASK_testplusargs___d225))
	$fwrite(32'h80000002, "[%10d", v__h5401, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d223 ||
	   TASK_testplusargs___d224 && TASK_testplusargs___d225))
	$fwrite(32'h80000002,
		"Axi2Apb: Child:%d ChildReq:%d",
		rg_child_burst,
		rg_child_req_count);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d223 ||
	   TASK_testplusargs___d224 && TASK_testplusargs___d225))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d388 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d389 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d390 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d395 =
	(TASK_testplusargs___d388 ||
	 TASK_testplusargs___d389 && TASK_testplusargs___d390) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b0;
    TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d397 =
	(TASK_testplusargs___d388 ||
	 TASK_testplusargs___d389 && TASK_testplusargs___d390) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b001;
    TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d399 =
	(TASK_testplusargs___d388 ||
	 TASK_testplusargs___d389 && TASK_testplusargs___d390) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b010;
    TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d401 =
	(TASK_testplusargs___d388 ||
	 TASK_testplusargs___d389 && TASK_testplusargs___d390) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b011;
    TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d403 =
	(TASK_testplusargs___d388 ||
	 TASK_testplusargs___d389 && TASK_testplusargs___d390) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b100;
    TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d405 =
	(TASK_testplusargs___d388 ||
	 TASK_testplusargs___d389 && TASK_testplusargs___d390) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b101;
    TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d407 =
	(TASK_testplusargs___d388 ||
	 TASK_testplusargs___d389 && TASK_testplusargs___d390) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b110;
    TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d421 =
	(TASK_testplusargs___d388 ||
	 TASK_testplusargs___d389 && TASK_testplusargs___d390) &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b0 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b001 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b010 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b011 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b100 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b101 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b110;
    TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d424 =
	(TASK_testplusargs___d388 ||
	 TASK_testplusargs___d389 && TASK_testplusargs___d390) &&
	axi_xactor_f_awfifo_D_OUT[17:16] == 2'b0;
    TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d426 =
	(TASK_testplusargs___d388 ||
	 TASK_testplusargs___d389 && TASK_testplusargs___d390) &&
	axi_xactor_f_awfifo_D_OUT[17:16] == 2'b01;
    TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d428 =
	(TASK_testplusargs___d388 ||
	 TASK_testplusargs___d389 && TASK_testplusargs___d390) &&
	axi_xactor_f_awfifo_D_OUT[17:16] == 2'b10;
    TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d434 =
	(TASK_testplusargs___d388 ||
	 TASK_testplusargs___d389 && TASK_testplusargs___d390) &&
	axi_xactor_f_awfifo_D_OUT[17:16] != 2'b0 &&
	axi_xactor_f_awfifo_D_OUT[17:16] != 2'b01 &&
	axi_xactor_f_awfifo_D_OUT[17:16] != 2'b10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  v__h12194 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d388 ||
	   TASK_testplusargs___d389 && TASK_testplusargs___d390))
	$fwrite(32'h80000002, "[%10d", v__h12194, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d388 ||
	   TASK_testplusargs___d389 && TASK_testplusargs___d390))
	$fwrite(32'h80000002, "Axi2AxiL: Axi4-Write:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d388 ||
	   TASK_testplusargs___d389 && TASK_testplusargs___d390))
	$fwrite(32'h80000002,
		"{awaddr:%0h,",
		axi_xactor_f_awfifo_D_OUT[60:29],
		"awlen:%0d",
		axi_xactor_f_awfifo_D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d388 ||
	   TASK_testplusargs___d389 && TASK_testplusargs___d390))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d395)
	$fwrite(32'h80000002, "sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d397)
	$fwrite(32'h80000002, "sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d399)
	$fwrite(32'h80000002, "sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d401)
	$fwrite(32'h80000002, "sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d403)
	$fwrite(32'h80000002, "sz16");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d405)
	$fwrite(32'h80000002, "sz32");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d407)
	$fwrite(32'h80000002, "sz64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d421)
	$fwrite(32'h80000002, "sz128");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d388 ||
	   TASK_testplusargs___d389 && TASK_testplusargs___d390))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d424)
	$fwrite(32'h80000002, "fixed");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d426)
	$fwrite(32'h80000002, "incr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d428)
	$fwrite(32'h80000002, "wrap");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_88_OR_TASK_testplusargs_89_A_ETC___d434)
	$fwrite(32'h80000002, "burst:%0d", axi_xactor_f_awfifo_D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d388 ||
	   TASK_testplusargs___d389 && TASK_testplusargs___d390))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d388 ||
	   TASK_testplusargs___d389 && TASK_testplusargs___d390))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d435 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d436 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d437 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d442 =
	(TASK_testplusargs___d435 ||
	 TASK_testplusargs___d436 && TASK_testplusargs___d437) &&
	axi_xactor_f_wfifo_D_OUT[0];
    TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d444 =
	(TASK_testplusargs___d435 ||
	 TASK_testplusargs___d436 && TASK_testplusargs___d437) &&
	!axi_xactor_f_wfifo_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  v__h12408 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d435 ||
	   TASK_testplusargs___d436 && TASK_testplusargs___d437))
	$fwrite(32'h80000002, "[%10d", v__h12408, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d435 ||
	   TASK_testplusargs___d436 && TASK_testplusargs___d437))
	$fwrite(32'h80000002,
		"Axi2AxiL: Axi4-Write: byte_index:%d",
		axi4_byte_shift__h11391);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d435 ||
	   TASK_testplusargs___d436 && TASK_testplusargs___d437))
	$fwrite(32'h80000002,
		"{wdata:%0h,wstrb:%0h",
		axi_xactor_f_wfifo_D_OUT[72:9],
		axi_xactor_f_wfifo_D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d442)
	$fwrite(32'h80000002, ",wlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d444)
	$fwrite(32'h80000002, ",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d435 ||
	   TASK_testplusargs___d436 && TASK_testplusargs___d437))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d435 ||
	   TASK_testplusargs___d436 && TASK_testplusargs___d437))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d445 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d446 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d447 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  v__h12568 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d445 ||
	   TASK_testplusargs___d446 && TASK_testplusargs___d447))
	$fwrite(32'h80000002, "[%10d", v__h12568, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d445 ||
	   TASK_testplusargs___d446 && TASK_testplusargs___d447))
	$fwrite(32'h80000002, "Axi2Apb: APB-Req  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d445 ||
	   TASK_testplusargs___d446 && TASK_testplusargs___d447))
	$fwrite(32'h80000002,
		"{paddr:'h%0h,",
		axi_xactor_f_awfifo_D_OUT[60:29],
		"prot:%0d",
		axi_xactor_f_awfifo_D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d445 ||
	   TASK_testplusargs___d446 && TASK_testplusargs___d447))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d445 ||
	   TASK_testplusargs___d446 && TASK_testplusargs___d447))
	$fwrite(32'h80000002, "write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d445 ||
	   TASK_testplusargs___d446 && TASK_testplusargs___d447))
	$fwrite(32'h80000002,
		",data:'h%0h",
		x__h11454[7:0],
		",strb:%b",
		x__h11536[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d445 ||
	   TASK_testplusargs___d446 && TASK_testplusargs___d447))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d445 ||
	   TASK_testplusargs___d446 && TASK_testplusargs___d447))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  !rg_child_res_count_03_EQ_rg_child_burst_66___d304 &&
	  rg_child_burst != 8'd0)
	begin
	  TASK_testplusargs___d531 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  !rg_child_res_count_03_EQ_rg_child_burst_66___d304 &&
	  rg_child_burst != 8'd0)
	begin
	  TASK_testplusargs___d532 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  !rg_child_res_count_03_EQ_rg_child_burst_66___d304 &&
	  rg_child_burst != 8'd0)
	begin
	  TASK_testplusargs___d533 = $test$plusargs("l0");
	  #0;
	end
    NOT_rg_child_res_count_03_EQ_rg_child_burst_66_ETC___d536 =
	!rg_child_res_count_03_EQ_rg_child_burst_66___d304 &&
	rg_child_burst != 8'd0 &&
	(TASK_testplusargs___d531 ||
	 TASK_testplusargs___d532 && TASK_testplusargs___d533);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  !rg_child_res_count_03_EQ_rg_child_burst_66___d304 &&
	  rg_child_burst != 8'd0)
	begin
	  v__h14039 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  NOT_rg_child_res_count_03_EQ_rg_child_burst_66_ETC___d536)
	$fwrite(32'h80000002, "[%10d", v__h14039, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  NOT_rg_child_res_count_03_EQ_rg_child_burst_66_ETC___d536)
	$fwrite(32'h80000002, "Axi2Apb: Accumulate");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  NOT_rg_child_res_count_03_EQ_rg_child_burst_66_ETC___d536)
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi)
	begin
	  TASK_testplusargs___d540 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi)
	begin
	  TASK_testplusargs___d541 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi)
	begin
	  TASK_testplusargs___d542 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_40_OR_TASK_testplusargs_41_A_ETC___d546 =
	(TASK_testplusargs___d540 ||
	 TASK_testplusargs___d541 && TASK_testplusargs___d542) &&
	apb_xactor_ff_response_D_OUT[0];
    TASK_testplusargs_40_OR_TASK_testplusargs_41_A_ETC___d547 =
	(TASK_testplusargs___d540 ||
	 TASK_testplusargs___d541 && TASK_testplusargs___d542) &&
	!apb_xactor_ff_response_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi)
	begin
	  v__h14485 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d540 ||
	   TASK_testplusargs___d541 && TASK_testplusargs___d542))
	$fwrite(32'h80000002, "[%10d", v__h14485, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d540 ||
	   TASK_testplusargs___d541 && TASK_testplusargs___d542))
	$fwrite(32'h80000002, "Axi2Apb: APB-Resp: Count:%2d", rg_resp_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d540 ||
	   TASK_testplusargs___d541 && TASK_testplusargs___d542))
	$fwrite(32'h80000002,
		"{prdata:'h%0h pslverr:",
		apb_xactor_ff_response_D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  TASK_testplusargs_40_OR_TASK_testplusargs_41_A_ETC___d546)
	$fwrite(32'h80000002, "slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  TASK_testplusargs_40_OR_TASK_testplusargs_41_A_ETC___d547)
	$fwrite(32'h80000002, "okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d540 ||
	   TASK_testplusargs___d541 && TASK_testplusargs___d542))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d540 ||
	   TASK_testplusargs___d541 && TASK_testplusargs___d542))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (rg_child_req_count == y__h13016 || rg_child_burst == 8'd0))
	begin
	  TASK_testplusargs___d481 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (rg_child_req_count == y__h13016 || rg_child_burst == 8'd0))
	begin
	  TASK_testplusargs___d482 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (rg_child_req_count == y__h13016 || rg_child_burst == 8'd0))
	begin
	  TASK_testplusargs___d483 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d488 =
	(TASK_testplusargs___d481 ||
	 TASK_testplusargs___d482 && TASK_testplusargs___d483) &&
	axi_xactor_f_wfifo_D_OUT[0];
    TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d490 =
	(TASK_testplusargs___d481 ||
	 TASK_testplusargs___d482 && TASK_testplusargs___d483) &&
	!axi_xactor_f_wfifo_D_OUT[0];
    rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d486 =
	(rg_child_req_count == y__h13016 || rg_child_burst == 8'd0) &&
	(TASK_testplusargs___d481 ||
	 TASK_testplusargs___d482 && TASK_testplusargs___d483);
    rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d489 =
	(rg_child_req_count == y__h13016 || rg_child_burst == 8'd0) &&
	TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d488;
    rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d491 =
	(rg_child_req_count == y__h13016 || rg_child_burst == 8'd0) &&
	TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d490;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (rg_child_req_count == y__h13016 || rg_child_burst == 8'd0))
	begin
	  v__h13155 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d486)
	$fwrite(32'h80000002, "[%10d", v__h13155, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d486)
	$fwrite(32'h80000002, "Axi2Apb: Axi4-Wr Poping Wd Request:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d486)
	$fwrite(32'h80000002,
		"{wdata:%0h,wstrb:%0h",
		axi_xactor_f_wfifo_D_OUT[72:9],
		axi_xactor_f_wfifo_D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d489)
	$fwrite(32'h80000002, ",wlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d491)
	$fwrite(32'h80000002, ",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d486)
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d486)
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d505 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d506 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d507 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d511 =
	(TASK_testplusargs___d505 ||
	 TASK_testplusargs___d506 && TASK_testplusargs___d507) &&
	axi_xactor_f_wfifo_D_OUT[0];
    TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d512 =
	(TASK_testplusargs___d505 ||
	 TASK_testplusargs___d506 && TASK_testplusargs___d507) &&
	!axi_xactor_f_wfifo_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  v__h13487 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d505 ||
	   TASK_testplusargs___d506 && TASK_testplusargs___d507))
	$fwrite(32'h80000002, "[%10d", v__h13487, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d505 ||
	   TASK_testplusargs___d506 && TASK_testplusargs___d507))
	$fwrite(32'h80000002,
		"Axi2Apb: New Axi4-Write Count:%d:",
		rg_req_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d505 ||
	   TASK_testplusargs___d506 && TASK_testplusargs___d507))
	$fwrite(32'h80000002,
		"{wdata:%0h,wstrb:%0h",
		axi_xactor_f_wfifo_D_OUT[72:9],
		axi_xactor_f_wfifo_D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d511)
	$fwrite(32'h80000002, ",wlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d512)
	$fwrite(32'h80000002, ",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d505 ||
	   TASK_testplusargs___d506 && TASK_testplusargs___d507))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d505 ||
	   TASK_testplusargs___d506 && TASK_testplusargs___d507))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d513 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d514 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d515 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  v__h13656 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d513 ||
	   TASK_testplusargs___d514 && TASK_testplusargs___d515))
	$fwrite(32'h80000002, "[%10d", v__h13656, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d513 ||
	   TASK_testplusargs___d514 && TASK_testplusargs___d515))
	$fwrite(32'h80000002, "Axi2Apb: APB-Req  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d513 ||
	   TASK_testplusargs___d514 && TASK_testplusargs___d515))
	$fwrite(32'h80000002,
		"{paddr:'h%0h,",
		apb_request_paddr__h13349,
		"prot:%0d",
		rg_wr_request[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d513 ||
	   TASK_testplusargs___d514 && TASK_testplusargs___d515))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d513 ||
	   TASK_testplusargs___d514 && TASK_testplusargs___d515))
	$fwrite(32'h80000002, "write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d513 ||
	   TASK_testplusargs___d514 && TASK_testplusargs___d515))
	$fwrite(32'h80000002,
		",data:'h%0h",
		x__h13359[7:0],
		",strb:%b",
		x__h13386[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d513 ||
	   TASK_testplusargs___d514 && TASK_testplusargs___d515))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d513 ||
	   TASK_testplusargs___d514 && TASK_testplusargs___d515))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d519 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d520 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d521 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  v__h13820 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d519 ||
	   TASK_testplusargs___d520 && TASK_testplusargs___d521))
	$fwrite(32'h80000002, "[%10d", v__h13820, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d519 ||
	   TASK_testplusargs___d520 && TASK_testplusargs___d521))
	$fwrite(32'h80000002,
		"Axi2Apb: Child:%d ChildReq:%d",
		rg_child_burst,
		rg_child_req_count);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d519 ||
	   TASK_testplusargs___d520 && TASK_testplusargs___d521))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  TASK_testplusargs___d8 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  TASK_testplusargs___d9 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  TASK_testplusargs___d10 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  v__h1074 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d8 ||
	   TASK_testplusargs___d9 && TASK_testplusargs___d10))
	$fwrite(32'h80000002, "[%10d", v__h1074, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d8 ||
	   TASK_testplusargs___d9 && TASK_testplusargs___d10))
	$fwrite(32'h80000002, "APB_M: Idle -> Setup");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d8 ||
	   TASK_testplusargs___d9 && TASK_testplusargs___d10))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  TASK_testplusargs___d14 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  TASK_testplusargs___d15 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  TASK_testplusargs___d16 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d23 =
	(TASK_testplusargs___d14 ||
	 TASK_testplusargs___d15 && TASK_testplusargs___d16) &&
	apb_xactor_ff_request_rv_port1__read[9];
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d25 =
	(TASK_testplusargs___d14 ||
	 TASK_testplusargs___d15 && TASK_testplusargs___d16) &&
	!apb_xactor_ff_request_rv_port1__read[9];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  v__h1225 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$fwrite(32'h80000002, "[%10d", v__h1225, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$fwrite(32'h80000002, "APB_M: Req from master: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$fwrite(32'h80000002,
		"{paddr:'h%0h,",
		apb_xactor_ff_request_rv_port1__read[44:13],
		"prot:%0d",
		apb_xactor_ff_request_rv_port1__read[12:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d23)
	$fwrite(32'h80000002, "write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d25)
	$fwrite(32'h80000002, "read");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d23)
	$fwrite(32'h80000002,
		",data:'h%0h",
		apb_xactor_ff_request_rv_port1__read[8:1],
		",strb:%b",
		apb_xactor_ff_request_rv_port1__read[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d25)
	$fwrite(32'h80000002, "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state)
	begin
	  TASK_testplusargs___d29 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state)
	begin
	  TASK_testplusargs___d30 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state)
	begin
	  TASK_testplusargs___d31 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state)
	begin
	  v__h1397 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state &&
	  (TASK_testplusargs___d29 ||
	   TASK_testplusargs___d30 && TASK_testplusargs___d31))
	$fwrite(32'h80000002, "[%10d", v__h1397, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state &&
	  (TASK_testplusargs___d29 ||
	   TASK_testplusargs___d30 && TASK_testplusargs___d31))
	$fwrite(32'h80000002, "APB_M: Setup -> Access");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state &&
	  (TASK_testplusargs___d29 ||
	   TASK_testplusargs___d30 && TASK_testplusargs___d31))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  TASK_testplusargs___d45 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  TASK_testplusargs___d46 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  TASK_testplusargs___d47 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  v__h1626 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d45 ||
	   TASK_testplusargs___d46 && TASK_testplusargs___d47))
	$fwrite(32'h80000002, "[%10d", v__h1626, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d45 ||
	   TASK_testplusargs___d46 && TASK_testplusargs___d47))
	$fwrite(32'h80000002, "APB_M: Access -> Idle");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d45 ||
	   TASK_testplusargs___d46 && TASK_testplusargs___d47))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  TASK_testplusargs___d51 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  TASK_testplusargs___d52 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  TASK_testplusargs___d53 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d57 =
	(TASK_testplusargs___d51 ||
	 TASK_testplusargs___d52 && TASK_testplusargs___d53) &&
	APB_PSLVERR;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d59 =
	(TASK_testplusargs___d51 ||
	 TASK_testplusargs___d52 && TASK_testplusargs___d53) &&
	!APB_PSLVERR;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  v__h1775 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$fwrite(32'h80000002, "[%10d", v__h1775, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$fwrite(32'h80000002, "APB_M: Res from slave: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$fwrite(32'h80000002, "{prdata:'h%0h pslverr:", APB_PRDATA);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d57)
	$fwrite(32'h80000002, "slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d59)
	$fwrite(32'h80000002, "okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d62 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d63 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d64 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  v__h2050 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$fwrite(32'h80000002, "[%10d", v__h2050, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$fwrite(32'h80000002, "APB_M: Access -> Setup");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d68 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d69 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d70 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d74 =
	(TASK_testplusargs___d68 ||
	 TASK_testplusargs___d69 && TASK_testplusargs___d70) &&
	APB_PSLVERR;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d75 =
	(TASK_testplusargs___d68 ||
	 TASK_testplusargs___d69 && TASK_testplusargs___d70) &&
	!APB_PSLVERR;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  v__h2208 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$fwrite(32'h80000002, "[%10d", v__h2208, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$fwrite(32'h80000002, "APB_M: Res from slave: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$fwrite(32'h80000002, "{prdata:'h%0h pslverr:", APB_PRDATA);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d74)
	$fwrite(32'h80000002, "slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d75)
	$fwrite(32'h80000002, "okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d76 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d77 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d78 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d82 =
	(TASK_testplusargs___d76 ||
	 TASK_testplusargs___d77 && TASK_testplusargs___d78) &&
	apb_xactor_ff_request_rv_port1__read[9];
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d83 =
	(TASK_testplusargs___d76 ||
	 TASK_testplusargs___d77 && TASK_testplusargs___d78) &&
	!apb_xactor_ff_request_rv_port1__read[9];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  v__h2363 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$fwrite(32'h80000002, "[%10d", v__h2363, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$fwrite(32'h80000002, "APB_M: Req from master: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$fwrite(32'h80000002,
		"{paddr:'h%0h,",
		apb_xactor_ff_request_rv_port1__read[44:13],
		"prot:%0d",
		apb_xactor_ff_request_rv_port1__read[12:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d82)
	$fwrite(32'h80000002, "write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d83)
	$fwrite(32'h80000002, "read");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d82)
	$fwrite(32'h80000002,
		",data:'h%0h",
		apb_xactor_ff_request_rv_port1__read[8:1],
		",strb:%b",
		apb_xactor_ff_request_rv_port1__read[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d83)
	$fwrite(32'h80000002, "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$fwrite(32'h80000002, "\n");
  end
  // synopsys translate_on
endmodule  // mkaxi2apb_bridge

